package com.vaidhyamegha.bioinformatics;

import org.junit.BeforeClass;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

import static junit.framework.TestCase.assertEquals;
import static org.junit.Assert.assertTrue;

public class BIAlgorithmsTest {
    private static IBIAlgorithms alg ;

    @BeforeClass
    public static void setup() {
        alg = new BIAlgorithmsSequential(new DNAAlphabetUtility());
    }


    @Test
    public void patternCount() {
        //should be 2
        int count = alg.patternCount("GCGCG", "GCG");
        System.out.println(count);
        assertEquals(count, 2);

        //should be 21
        count = alg.patternCount("ACGGCGCCTGGAACACTGGAACTACTGGAACTGACGCTGGAACCCTGGAACCTAGCTGGAACGGCGTGTCCTGGAACTCTCTGGAACATCCTGGAACCTGGAACACTGGAACGACTGGAACCTGGAACCCCTGAATTCAGCACCCTGGAACGGCAACTGGAACAAGTCTGGAACGTAGGTCATGCCTGGAACACCGAATGCTGGAACTGTCTCTGGAACCCTACTGGAACGCTCCTGGAACACTGGAACGACTGGAACTCTGGAACTCTGGAACCTGGAACCCTGGAACCCCTGGAACCTGGAACTTCTGGAACACTGGAACCATACTGGAACCCTGGAACCTGGAACCTCTGGAACGCTGGAACCTCTGGAACCTGGAACGCCTGGAACTACTGGAACGGGTCTGGAACTACTGGAACTCCCTGGAACTACCTGGAACCTGGAACATCTGGAACCACTGGAACTCAATAGGCTGGAACCTGGAACCCTGGAACCTGGAACGCTGCTGGAACCTGGAACGCTGGAACCCTGGAACTACGACTGGAACGCTGGAACCTGCTGGAACTGCTGGAACCCTGGAACACTGGAACCAAGAATCATGGCTGGAACATGCCGTTGGCGCTGGAACGCTGGAACAACTGGAACCCGCTGGAACTTCGGTGCATCTGGAACACTGGAACATCTACTGGAACGGGACTGGAACGGTTCATGGATACTGGAACATGACTGGAACCCCGCTGGAACCCTGGAACTGCTGGAACCAAAGCTGGAACCTGGAACCTGGAACACCTGGAACCTGGAACATTAGACTGGAACAGGAACTGGAACCTGGAACACAGCTGGAACTGGGCCTGGAACAGCTGGAACCTGGAACATCTGGAACTCTGGAACCTGGAACGTATCTATCAGTCCACTCTTCCCTGGAACGACTGGAACCTAGGCTGGAACGCTGGAAC", "CTGGAACCT");
        System.out.println(count);
        assertEquals(count, 21);
        System.out.println(alg.patternCount("GACCATCAAAACTGATAAACTACTTAAAAATCAGT", "AAA"));
    }

    @Test
    public void frequentWords() {
        //should be 2 sized Arraylist
        List<String> frequentWords = alg.frequentWords("ACGTTGCATGTCGCATGATGCATGAGAGCT", 4);
        System.out.println(frequentWords);
        assertTrue(frequentWords.contains("CATG"));
        assertTrue(frequentWords.contains("GCAT"));
        assertEquals(2, frequentWords.size());

        //should be 6 sized Arraylist
        frequentWords = alg.frequentWords("GGAATTGGTAGCCGCTCGGCAAACGACGGCAAACGACGGCAAACGACAGCCGCTCGGCAAACGACAACAGGTCATAGCCGCTCGGCAAACGACGTCACGCGGGTCACGCGGGGCAAACGACGTCACGCGGGGAATTGGTGGCAAACGACGTCACGCGGGTCACGCGGAGCCGCTCGTCACGCGGAACAGGTCATGTCACGCGGGGCAAACGACGGAATTGGTGGCAAACGACGTCACGCGGGGCAAACGACAACAGGTCATAGCCGCTCAGCCGCTCGTCACGCGGGGCAAACGACAACAGGTCATGGCAAACGACGGCAAACGACGGAATTGGTGGAATTGGTGTCACGCGGGGAATTGGTGGAATTGGTGGCAAACGACGTCACGCGGGTCACGCGGAGCCGCTCGTCACGCGGAGCCGCTCAACAGGTCATAACAGGTCATGTCACGCGGAGCCGCTCAACAGGTCATAGCCGCTCGGAATTGGTGGCAAACGACGGCAAACGACAGCCGCTCGGCAAACGACGGAATTGGTAACAGGTCATAACAGGTCATGTCACGCGGGGAATTGGTGGAATTGGTGGAATTGGTGGCAAACGACGTCACGCGGGGAATTGGTGTCACGCGGGTCACGCGGAGCCGCTCAGCCGCTCAGCCGCTCAGCCGCTCAGCCGCTCGTCACGCGGAACAGGTCATAACAGGTCATGGAATTGGTGGAATTGGTGTCACGCGGAGCCGCTCGTCACGCGGAGCCGCTCAGCCGCTCAGCCGCTCGGCAAACGACGGAATTGGTAGCCGCTCGGCAAACGACGTCACGCGGGTCACGCGGAGCCGCTCAGCCGCTCAGCCGCTCGGCAAACGACGGAATTGGTAACAGGTCATGGCAAACGACGTCACGCGGAACAGGTCATGGAATTGGT", 12);
        System.out.println(frequentWords);
        //[GGCAAACGACGG, AGCCGCTCAGCC, GCCGCTCAGCCG, CCGCTCAGCCGC, CGCTCAGCCGCT, GCTCAGCCGCTC]
        assertTrue(frequentWords.contains("GGCAAACGACGG"));
        assertTrue(frequentWords.contains("AGCCGCTCAGCC"));
        assertTrue(frequentWords.contains("GCCGCTCAGCCG"));
        assertTrue(frequentWords.contains("CCGCTCAGCCGC"));
        assertTrue(frequentWords.contains("CGCTCAGCCGCT"));
        assertTrue(frequentWords.contains("GCTCAGCCGCTC"));
        assertEquals(6, frequentWords.size());

        System.out.println(alg.frequentWords("CGCCTAAATAGCCTCGCGGAGCCTTATGTCATACTCGTCCT", 3));
    }

    @Test
    public void patternToNumber() {
        assertEquals(0, alg.patternToNumber("A"));
        assertEquals(1, alg.patternToNumber("C"));
        assertEquals(2, alg.patternToNumber("G"));
        assertEquals(3, alg.patternToNumber("T"));
        assertEquals(0, alg.patternToNumber("AA"));
        assertEquals(0, alg.patternToNumber("AAA"));
        assertEquals(12, alg.patternToNumber("ATA"));
        assertEquals(912, alg.patternToNumber("ATGCAA"));
        assertEquals(26748261, alg.patternToNumber("AAACGCGAAGCCCGCC"));

    }

    @Test
    public void numberToPattern() {
        assertEquals("A", alg.numberToPattern(0, 1));
        assertEquals("C", alg.numberToPattern(1, 1));
        assertEquals("G", alg.numberToPattern(2, 1));
        assertEquals("T", alg.numberToPattern(3, 1));
        assertEquals("AA", alg.numberToPattern(0, 2));
        assertEquals("AAA", alg.numberToPattern(0, 3));
        assertEquals("ATA", alg.numberToPattern(12, 3));
        assertEquals("CCCATTC", alg.numberToPattern(5437, 7));
        assertEquals("ACCCATTC", alg.numberToPattern(5437, 8));
        assertEquals("AGT", alg.numberToPattern(11, 3));
        assertEquals("AAAACTAAATA", alg.numberToPattern(7180, 11));

    }

    @Test
    public void frequencyArray() {
        assertEquals("[2, 1, 0, 0, 0, 0, 2, 2, 1, 2, 1, 0, 0, 1, 1, 0]", Arrays.toString(alg.frequencyArray("ACGCGGCTCTGAAA", 2)));
        assertEquals("[0, 1, 1, 0, 1, 0, 0, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 3, 0, 0, 2, 1, 0, 3, 0, 2, 0, 0, 1, 0, 0, 1, 2, 0, 1, 1, 0, 1, 1, 3, 0, 1, 0, 1, 2, 0, 0, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, 1, 0, 0, 0, 3, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 1, 1, 1, 3, 1, 0, 0, 1, 2, 1, 0, 0, 1, 1, 0, 1, 0, 3, 3, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 1, 0, 3, 2, 0, 0, 3, 1, 0, 1, 2, 0, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 1, 1, 1, 2, 0, 0, 0, 2, 0, 0, 2, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 2, 0, 1, 0, 1, 0, 0, 1, 1, 0, 2, 2, 0, 2, 1, 0, 1, 0, 2, 1, 0, 0, 0, 0, 3, 0, 0, 1, 1, 0, 3, 1, 1, 2, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 2, 1, 0, 0, 2, 1, 0, 0, 0, 1, 1, 1, 2, 0, 0, 0, 2, 0, 1, 2, 0, 0, 0, 0, 3, 1, 0, 1, 1, 2, 1, 2, 3, 0, 1, 0, 0, 1, 1, 2, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 3, 2, 1, 0, 2, 1, 1, 2, 0, 1, 1, 0, 3, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 2, 3, 3, 0, 2, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 4, 1, 1, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 2, 1, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 2, 0, 1, 0, 1, 0, 1, 1, 0, 2, 0, 0, 1, 0, 2, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 2, 1, 0, 1, 2, 3, 0, 1, 1, 0, 4, 1, 2, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 3, 0, 0, 0, 2, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 0, 1, 0, 3, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 3, 0, 0, 1, 2, 1, 0, 1, 1, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 0, 0, 0, 4, 1, 0, 2, 0, 0, 2, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 0, 2, 1, 1, 0, 1, 1, 1, 1, 1, 1, 3, 0, 1, 0, 0, 1, 1, 0, 0, 0, 2, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 3, 0, 1, 1, 0, 0, 2, 1, 0, 0, 2, 2, 0, 3, 1, 2, 0, 0, 0, 2, 1, 0, 1, 2, 0, 0, 0, 1, 0, 0, 2, 0, 0, 3, 1, 0, 2, 1, 0, 0, 0, 1, 0, 2, 1, 0, 1, 2, 0, 1, 1, 0, 1, 0, 0, 1, 2, 1, 2, 1, 1, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 2, 1, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 0, 0, 2, 2, 1, 0, 1, 2, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 1, 2, 1, 0, 1, 1, 2, 0, 0, 1, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 2, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 2, 1, 0, 4, 0, 1, 1, 2, 2, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 4, 0, 2, 0, 0, 1, 1, 0, 0, 2, 0, 0, 1, 2, 0, 1, 1, 0, 2, 2, 0, 0, 0, 0, 1, 0, 0, 3, 1, 0, 0, 0, 1, 0, 0, 2, 0, 0, 2, 3, 1, 0, 1, 1, 0, 1, 0, 2, 1, 4, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 2, 3, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 2, 0, 3, 2, 0, 0, 1, 0, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 3, 0, 2, 4, 0, 4, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0]", Arrays.toString(alg.frequencyArray("ATCAGTTGACATAACCCACCAATGTTGCAGTCTCATCCCCCAAACTGGACTTTACGGAATAACCGACCTCGTGCAGTCGTGTTCAAACTTTGAGAGGCTCGACGTGTGTCTGCGTTGAGTAATATTGACTTGCGTTATTCTTAGAATTAGATTATTTGCAATACAGGACAGGTGCAGTGTGGGCGGAGTCTTACGTCGACAATGTGTGCTTCGGGATCGCGCCACCCCCCAAGGGCACTCCATCCTCGATTGGAATCGACGTTCCGCGTAGGCATCCCAGGCTACACGCAAGTATTTGAGAAGACCTTCCAGGCAACTGGCGCAGGCGTACTGGTTCACCCCTCTCATGTGTTTATATTGCAGCGAGGTCGACTTACAGGGATCCCCTGACTTGTCCAACGTCGCTGCGAGTGCTGCAACGTCCAAAAGACGCAGAAGTTTGCACCTTCTTCTACCTGACATAAGGGGAATACCTTCGTCATATTAGAAGACGGTTTAGCTAAATACACATAGGACGATACTTGAGAGCTCCAACGAAGATAGCGTTCTTAGCTCCAATGCCTGCGTCCCAATCCGGATGATAAGATTGGTTATGATGGGAAAACACAATCGATCATCTATGGCTGAGCCCCAAGTCAGGGACGGCACGCCGTACTAACGTGAACCTATCTATAGCCCCGTGTGGGGCCGCGAGCCCGCGTCGGGCTACGTGTCTAAGGCCAAGCGGCGGAAAG", 5)));
    }

    @Test
    public void fasterFrequentWords() {
        //should be 2 sized Arraylist
        List<String> frequentWords = alg.fasterFrequentWords("ACGTTGCATGTCGCATGATGCATGAGAGCT", 4);
        System.out.println(frequentWords);
        assertTrue(frequentWords.contains("CATG"));
        assertTrue(frequentWords.contains("GCAT"));
        assertEquals(2, frequentWords.size());

        //should be 6 sized Arraylist
        frequentWords = alg.fasterFrequentWords("GGAATTGGTAGCCGCTCGGCAAACGACGGCAAACGACGGCAAACGACAGCCGCTCGGCAAACGACAACAGGTCATAGCCGCTCGGCAAACGACGTCACGCGGGTCACGCGGGGCAAACGACGTCACGCGGGGAATTGGTGGCAAACGACGTCACGCGGGTCACGCGGAGCCGCTCGTCACGCGGAACAGGTCATGTCACGCGGGGCAAACGACGGAATTGGTGGCAAACGACGTCACGCGGGGCAAACGACAACAGGTCATAGCCGCTCAGCCGCTCGTCACGCGGGGCAAACGACAACAGGTCATGGCAAACGACGGCAAACGACGGAATTGGTGGAATTGGTGTCACGCGGGGAATTGGTGGAATTGGTGGCAAACGACGTCACGCGGGTCACGCGGAGCCGCTCGTCACGCGGAGCCGCTCAACAGGTCATAACAGGTCATGTCACGCGGAGCCGCTCAACAGGTCATAGCCGCTCGGAATTGGTGGCAAACGACGGCAAACGACAGCCGCTCGGCAAACGACGGAATTGGTAACAGGTCATAACAGGTCATGTCACGCGGGGAATTGGTGGAATTGGTGGAATTGGTGGCAAACGACGTCACGCGGGGAATTGGTGTCACGCGGGTCACGCGGAGCCGCTCAGCCGCTCAGCCGCTCAGCCGCTCAGCCGCTCGTCACGCGGAACAGGTCATAACAGGTCATGGAATTGGTGGAATTGGTGTCACGCGGAGCCGCTCGTCACGCGGAGCCGCTCAGCCGCTCAGCCGCTCGGCAAACGACGGAATTGGTAGCCGCTCGGCAAACGACGTCACGCGGGTCACGCGGAGCCGCTCAGCCGCTCAGCCGCTCGGCAAACGACGGAATTGGTAACAGGTCATGGCAAACGACGTCACGCGGAACAGGTCATGGAATTGGT", 12);
        System.out.println(frequentWords);
        //[GGCAAACGACGG, AGCCGCTCAGCC, GCCGCTCAGCCG, CCGCTCAGCCGC, CGCTCAGCCGCT, GCTCAGCCGCTC]
        assertTrue(frequentWords.contains("GGCAAACGACGG"));
        assertTrue(frequentWords.contains("AGCCGCTCAGCC"));
        assertTrue(frequentWords.contains("GCCGCTCAGCCG"));
        assertTrue(frequentWords.contains("CCGCTCAGCCGC"));
        assertTrue(frequentWords.contains("CGCTCAGCCGCT"));
        assertTrue(frequentWords.contains("GCTCAGCCGCTC"));
        assertEquals(6, frequentWords.size());
    }

    @Test
    public void fasterFrequentWordsBySorting() {
        //should be 2 sized Arraylist
        List<String> frequentWords = alg.fasterFrequentWordsBySorting("ACGTTGCATGTCGCATGATGCATGAGAGCT", 4);
        System.out.println(frequentWords);
        assertTrue(frequentWords.contains("CATG"));
        assertTrue(frequentWords.contains("GCAT"));
        assertEquals(2, frequentWords.size());

        //should be 6 sized Arraylist
        frequentWords = alg.fasterFrequentWordsBySorting("GGAATTGGTAGCCGCTCGGCAAACGACGGCAAACGACGGCAAACGACAGCCGCTCGGCAAACGACAACAGGTCATAGCCGCTCGGCAAACGACGTCACGCGGGTCACGCGGGGCAAACGACGTCACGCGGGGAATTGGTGGCAAACGACGTCACGCGGGTCACGCGGAGCCGCTCGTCACGCGGAACAGGTCATGTCACGCGGGGCAAACGACGGAATTGGTGGCAAACGACGTCACGCGGGGCAAACGACAACAGGTCATAGCCGCTCAGCCGCTCGTCACGCGGGGCAAACGACAACAGGTCATGGCAAACGACGGCAAACGACGGAATTGGTGGAATTGGTGTCACGCGGGGAATTGGTGGAATTGGTGGCAAACGACGTCACGCGGGTCACGCGGAGCCGCTCGTCACGCGGAGCCGCTCAACAGGTCATAACAGGTCATGTCACGCGGAGCCGCTCAACAGGTCATAGCCGCTCGGAATTGGTGGCAAACGACGGCAAACGACAGCCGCTCGGCAAACGACGGAATTGGTAACAGGTCATAACAGGTCATGTCACGCGGGGAATTGGTGGAATTGGTGGAATTGGTGGCAAACGACGTCACGCGGGGAATTGGTGTCACGCGGGTCACGCGGAGCCGCTCAGCCGCTCAGCCGCTCAGCCGCTCAGCCGCTCGTCACGCGGAACAGGTCATAACAGGTCATGGAATTGGTGGAATTGGTGTCACGCGGAGCCGCTCGTCACGCGGAGCCGCTCAGCCGCTCAGCCGCTCGGCAAACGACGGAATTGGTAGCCGCTCGGCAAACGACGTCACGCGGGTCACGCGGAGCCGCTCAGCCGCTCAGCCGCTCGGCAAACGACGGAATTGGTAACAGGTCATGGCAAACGACGTCACGCGGAACAGGTCATGGAATTGGT", 12);
        System.out.println(frequentWords);
        //[GGCAAACGACGG, AGCCGCTCAGCC, GCCGCTCAGCCG, CCGCTCAGCCGC, CGCTCAGCCGCT, GCTCAGCCGCTC]
        assertTrue(frequentWords.contains("GGCAAACGACGG"));
        assertTrue(frequentWords.contains("AGCCGCTCAGCC"));
        assertTrue(frequentWords.contains("GCCGCTCAGCCG"));
        assertTrue(frequentWords.contains("CCGCTCAGCCGC"));
        assertTrue(frequentWords.contains("CGCTCAGCCGCT"));
        assertTrue(frequentWords.contains("GCTCAGCCGCTC"));
        assertEquals(6, frequentWords.size());
    }

    @Test
    public void reverseComplement() {
        assertEquals("GGGT", alg.reverseComplement("ACCC"));
        assertEquals("ACCGGGTTTT", alg.reverseComplement("AAAACCCGGT"));
        assertEquals("CTTTATTAGAGATTCTTTAATCCGGTCTCCCGCCTTCTTTACTCTGAGGGTGTAACTACAAAGTATCAGGCCGAGCTTGCCAGCTTTAAATTGTGTCGCTTCGATGATTATCGTCGACATCAGTTGTACCCGCGCGGAGTACCAGTGTGCGGTGTACCACCGTGAACTGCACACACCTCACTCGCGCATGCCCACCGGTTCGCTCAACAGATGTAGGCGTGAACACTTAGCTTACAGTTTTCTGTTTCGGTCCATGAAGTACAGAGCTTGTCTTGGGTATGCACCATCACCGTCTAGCGTACCATTCCGCCTACCGGACAATTCAGTTCTTAACTCAGAGGTCATCGGGCCTTGGGACGAACTTCAGTATCTAAGAGAATCGGGAAGCAGGGCCTTTCATCTGAGGAGAGTAAATATTTGATGCCATCTGAGATATCTCCAATCATCGTAACGCAACCATCGGTACGGGCCAGGGCGCTGTGTAGACGACGCTTGTACCCGGTCTACCCAACCGCACTAGCTCTTTCATAAGAGCGGCAGTGGTACGCACCGCGTTCAGACTATAAACAAAGTTCCCCCCAACAGCTGGTGAAATGTTCCTATGGATGCTCATGAGTGCATAGTTTAAACTACACTACTTCATTGACCCTAATAGGTCTTCAACCTATATTGTACTGTGCAGATCTTTGATAGATTGTTGCCACGTCATGCCGGGGCCTGTAGGTACTATGCGACCCCCTTCTATCGTTCCGGGAGTGATCAGGGGGCCCGCAGGGCGCTGCTGTTCTTCTGGTGTGGATCCGTCGCTACTATTTTTCGTACGACCTTAAGGTGCTCATGGAGTGGCCGGGGTATGCTATTATAATCAAGGAAAGAGACGGCGACATTTCATCGTGCATATTTTATAAATGCCAGAAATCCGTAGATAAGTGATAGCCGTGTTGTGCGAGCTGAGGACTTGTCACCCCTCAATGAAAAGAATACTCTTAAGGAACCAAAGCCGATCATTAAAATGATTCCCAGAAGAGCACTATCTCCCTTACTTTGAAGTGATACTGTCATGAGCGCGCTTAAGACTGAGAGTCGGATTGGTAGGCGATCACCCCCGTTATCTGCGTGCGCTAGACCGCTTTGTTCTCAGAATTTCCTCGGCGCATACTCCGGATGTGGGCTGTGGACATGTATGTATCGACCTTGGTGCATCTGGGACAGATGGCGCCGTGGGGGCTATCTGGCCGTATATCAGAGTGTTCAACGAGCGACATATGTCGTAAAGACAAAATGGTCGGGATTTAATGGATCATCAGCTGACCGGAAGTCCCTAGATCGCAAAGAAAGGTTAAACTCAAAGAAATGTTTTTTAATATCGCGCAAACAGTGGCGTACTCAGTTTGAATAAACCTGTACAATTTTTAAGATAGTCACCTGACATGAGGCGGTCCCCGGCATTAAATGCAAAAACATGCGGGTAGTAGGGCTATCCCGACAAATTCCGGACTACGCTCGGTGTTCTTTAAGCTCCGTGTACCCTAAGATTATATATGTCATGAGTGCTTAACTTAAATAATGTGGCATGCGTAACGGCAGAGGAAGATGTACAGCTGCTTTTCTGGATTTGCCGCCGCTCAGTCGAGAAAACCCTGCGAATGAAGGTGAGAGCACTATACCCCGGCTTGGATTTTGTCAGGAGTAGAAAACGTGTACTACAAACCGGACTGCGGCTCCTTGCCCAGATTCGGCCGAAACAGGACGAGCGCCCACATGACTGCTTACACGGCTCATTCCTTGAGGGTTGTCAGTATCCCATATTCCAAGCTATACGAGAAAGAACTGGCGAAAAAATATAAGCGGATCTTAGGGATACTTGGTGAACAGGGCGGGTCTTTACTCTGATCCGGCCCTTCTGGCGGCCATGCGCACTTCTGGGCGCTCACTCGCAGCCTTAAATCCAGAACTTCCTATCAATAGCCCTAGGCTGTCCTGTGAAGGCTTGTCGAACCAATTTAACGACTACCCAAGTCTGGCAGGTACTGTCGAGTTCCAGTGAGCTGAAGATCTCATATATACAGATCAAGCCGACTGAGCACGTGCTAAAGTTCCCATTCGCAATCTAGTCCGGTTACCCGCCTTATCGCCCAATTCAGGTTCAAGGGACATATCCCATCTCGTAGGATAGAATAATGTCTATGGTCCCCTATAACCACCTAAATCACGTGCGAACGGAGCTGTGAATCTTGTAGATGGAGGATTTTAGTACAGAATGCTTAAAGCGTTTCATCGTGATACCCGGGTGCTATGGAATAGCAGACTCGAATTCCAAACTCTGATCCTTGCTCTTCAGACGTCTCTTACGAAAACGACCTCACCGACGAAGAATGTAGTCCATTCTGTGAGCGAGCCGGGACTGTCCGCCGATGTACCGGTAGCGTCTAACCGGCGGTACGGCGCGATGATAGCCATCACTGTTATGTTACGCTAACGGGATACAGCGATGATCTTGTAGTCTACGGTTAGTACGTGGTAATTCCAGCCACAGTGTCTGGTACTCACTCTTGGATGCTCAGCTAATGTTGTTTTGCCTGTTAGCACCAGACTGCGGTCCCCCATCCCTGGGTCAGGCTCCGGCCCGTCTTGGGTTCGATATCCGCGGTTCGATTGGGACTCTATATCGGGCAGGTAATAGATTCAGGCTATGTCGAGGATGGCGCGTCGGTTAGTGGTCAATCACCCGAAGACAATGTTATGATGCCAACCGTCACCCGTACCGTAGTTCTCTTCAACAGACTGCAATCTAGCTGTGGCAGGCGTGTGGATTGTATAGCTCACTATAGACTTCTCCAGAATTATCACAGTACCCCCTCCGCCTCCAATTGGTGTTAAGTGGGCCGTAGTAACGCCCACAAGAACAGATAATACGCTGACCAGAATCCTGTATGTGAGACTGTATCAACTAGGGAAATGCATGCGTGATTGATGAGCTCTAGCGTTGCCTCCGGAGAGTCCGACTGTGCTTGCTGGAACGCTGACTAGTGAGAGGCTGGATAGTTTACAGATGCGATCATCGACCGGGTAATCATAGTACTAATCTTATAGAGGGACTTCTCCAAGTAAATGTCGGGACCGCTGTAGTTAGTGAGTGGTAGGTGGATTGTAGATTGAGTCTATAAACCAAACTTTCTCCTCGAGCTGACAAGTCTAACCTTAATTAAATAGTTAAGGCTACAAGTTCAGCACGATGACGTAAGTAAATCGAAATAGATTAAGTCATCAGCAAGCTCCTACTTTCTCATTTGTATGACTCAACGGGGTCATGCGCGGGATGGGGATGTTCGCCCCTAAAAGGACTATACAAGCTTAATTCATGGGATAAAGACTAATGGTCGTGTCTTCCCGCAGGCCGGGTCATACTATTGCCCGGGGAGGTGGCTGGGTTGAGCGAATGGCCAGTTATTTCGACCGCCATAATACGTTGGTTGGGCCAGGACATGCAGGCGGGTATATCATAGGCTGTCTAGCGGCACAGCGAACCATCTAGGTCAGGGCAAACACCCTAGTTACCTCCGCACGCCCGATAGTGAGAGATGCCAGTCAAAGTGGCAATAGCGTCGGGCGAAGAACGGTGTCTCGTTTGGTTTAAAGGTGGTGAGGGGACACAGGCACGGTGCAGGTTTGGTGCGAAGATACCATGGTAGCTTCTCCACGAGACGCCGGAGTAAACCGCTCTCGGGTCCAGCACAACGTCGCAGCCTACTGCGCAACATAAGTTACTCTCGTGTCAGGGGGCGCCGTTAGCAGTGTGACATATTGATTGTTTAGTCCCCTCGGCAGGATGTGGGCGCCAGTTGTTCAAGGGTAACGTACGCGAATTCGTTTAGGCCAGGCGAGTTAGTGGGGCTACTGGTTGGCAGTACCAACATTAGATAATATTTCTAGAGGTCCTGTGCTCTATCTCGTGACTTGTCTGGTCCGGATTGTAGCCGTGTCATCTTCACTCACAAGGGAACCATCAATGTTGCCTATAAAGTTGCGTAGATCCGCGTGCTACTCGGGCTAGATCCTCTGGAGAGAGGTCACCTAGAAGTCCTCTGTAGTCTCTCCCGTTAACCACTGGTGACCTCCTCATCGTTCATGGCTGTGTGCACTCGGACACGGCGGGTACGTGAGTCCGTCTTGCATAGTGATGACCCTTGGGAGACCATTTCGGGAAGCTGTCCCACCAGGTTGTTGTCCCCGACGAGGAATCAGACGGATATGACATTGTTCCAATGAAGGTGAGCAAGTGCTTGTCTTCGTGCTGAATTATAGAATTCACCTTAACATAGCCAATCCGAAATAAAGTGCTATCGGTCTCGATGCCTGGTGGATGTACTGGAGTAACCTTATACGGGTTGGGTTACCATATTGCTCGATGAACTCTAAAACCGAGGACATCTTAGTGGCGGAGGCTCTGGTCGTGGTCTCGGATATGTGAGCGTCGGTTACCTCGGACGACCCATTTTCACGTCGCCTCACGGGGAATGCCTAATAGGGATACGATGACCTTCATGTGCGCGAATAGGTCGAGCCCAACTCACTGTCATGTCATAGTCTGTTCGGTTTATGTACCATCTCGTACCGAAAGCTATAGAGATCCCATGTTTTTTGTTGCGTAAAGTAAGTAGCTGCTGGAATGGGCGGCTTTTGCTCACCATCGTCATCAGATCGCGTTAATATCGCGAACATCGACTTCATAGGGGCGCGGATTAGTCAGTTGTCACACTAATTTTTACCCGAGCCGCAAACTGGGATAGCCAAATTCATTGTAAGCGCTGTGGGATCGAAGGCTCATGTCAAATGCATAATTCGAGACTATGGGCATATTGGAGTTTCGACGTTTATCTCCCTCCTCGCGCTCACGAAATCCCGAAGGTACCGCGAAATACACCTACGTACGTTCCGGTCCACAACCAACTTAAGTAATCGACTACTATTGACGCCAACGGTCAAGGTTTTCATCCCCCATTATAGTGTCGCAGTTAGTCACCCCGGCCCGTTCCGTTCTACCGTCTAGATCTATTCGCATTTGACGTACAAACACTTGTAGGGATGTACGGTTAGTACCGGCACAGTAGACTGATGTGTTCTTCCAGAACGACTGTGATGCCTGTGGTCGGAAACGGCCAAGGCAACTTGTCTAATCACCGGTCGGACGACCGTCTCCTTAGTATTTACTTATCTCGTTGATTATGAAACCACCGCTGCTGGTTATAACAGTACAGTGGGTCAACCCACAATTTGAAGACAGGAACTGGGTCTTGCATCTATCACGCAGTGGTGGTCTACTAACAACTGGGGAACCAAATGCTCAGACGATCGCAATATCACAACTGTTCCACAATCCATCCTCACCTCCATACGTATGTCTCCCTTCGGTTCTCTTATCATGCCGAGACCCAGGACAAGCACAATCAACTTACAATAACCCAAGATCGTTTCCGCACGCAGTTCTTTTTATCGCACTGACTTGCGCGCGTGAGATGTGATGTCTCATGCTGCTGAACCGCCCTATTTTAGCTGTAGTCTGAAATCTTATGTGCCAAGCCAAGATGGGGCTCCGCATGTCCTTTAGACGATTACCATAAGTGGATTCGCGGAGGACAGCGTCTAACCCTTCTATGACCCCTCGGCCTATGCTCATCCTCTGTCCGTTCCTCTTAATTAATCTGCTGACACACGCTATGGGACATAGCTGAACTAATATGATGAAAAATGTAGTCGCTAGTCCAATGACAAGGGCCCCGCACAATGGGCGGACGGCGAGGTGTAGTAATATTCAAACGCGACTTGGCGAATTTTATTTGCTCAGGTCCTAACAATTTTTCGGGTATAGAGTGCCACGTGCTAATCATAACGCTTGTCGATTACTTTCATATACACTTGTTGATGCCAACACATTACTGTGTCCTTTGCTATCGCCTGGGATGCACGCCCATACTTGCGAAGCTTACAAACGAGTATCCGTTAGGCTAGGGTCACGCTGGCAGCTCCTGCGTTCTAGTTTCAAGCGCGGTCAATTGCTCCAGGAAGACAAGTCAGAGGCCCATTGTTCTTGATCGGAGGTCTATGCTCGCCGTCCAAGTCCGGAGGCCACGTCGAGTGCCACTAGGGCATGCACTGTCTAGAAGCGTACTTTGCAAGACCATAGGTGCCGCCGGTACTGTCCGTTTTACGTATGGCGAGTCCTCCCCCAATTGTTGGATGAGTGGAGGAAGCTACCGCTCCAACCCTCGGTGGACCACGAGTGAGTATTCCAGCCTGGATCTACTCGCCTTTGCAATTTAAAGAAGTGTAAGTATCCAAAGTAACTTATTCGGGTAACCCTCAAGCACCGTTCGGTACACCCATCATCTACGGCACTCACGGAATAATGGGAACACTCGCCTTCTTTCCTGACCACTAGTCGCGCCTGTACACCTACTTGTTCACGTCTCTTCTTGTTTTAGGCGTCTACATCGTAGGCAGCCGGATTTTTTAGATCTGATCAAATAAGGGGCCCATATAAGCGGAGAGATCTTCACGAGACTGAGAAGGATATAACACATCACCCTACGGCAAAATTCTCCCTCGGCTAAGTGGGACACGTTACCCGACAACGTCCGCCATTCACACCGGCTGAAAAGTGATACCGCATACCGTGACTCAGGCTCGGTAGAAGCAAGTTGGGTCGAACAATGGTGCTCTCTCTGTGCTCTTAATTAGAAGCCTTAACCCGCTCTTTTTTCTTCAGCAATTTGCCAAGGTCTGTGACCCTGTGGGCTTGACTGATAATGTAGACCTACCACGTCTAAGGAGCGGCCCGGTATGATAAACATGGTTTCGAACTCGGCGGTTGTAGGCGCCCCGGCGATGAGTGCAATCCCCGACTCACAGACTTCCCCGGGTCGTGGCTCACGACTATTACAGAACTGGTAATTCTGGCTGCTCCGAAGCTTGCGGGCATACCGCGCCAGGTTATAGAGTGGATCCTATGGAAGATCTTACGCTTCCTTCCGGACTCGGTCGGCTTACCGGTCCCAGTCCATTCGTGAGTGCGCACACGCTAAGTCGAGCTATATATCAGACAGGACTAGTGAGTCGTGGCTCATCAACAACATGCTCGCTTTCAACATGCAATGGCGATTCGGAAGGTATATGGCGGCCTCGTAGATCCTACTTGGAGTGAGGTGTCAAGCTAAATTGAACGTGGGATGGATCTGGAGGCTCTCGCACGAAAACTATGTGCGGTATTTCCGGTAGAGAGGCCGTACAGGGGTGGAACTGGCTGGGTATTTTGCAGTCACAGGGGTTGGATCAGCCGCAGAAAACTCATTGTTCAACTAGACTGTCTCATCTTGGACCCGCATCAGGAGTTTCTTTCAAGTAACTATTATCCAACTGCACTAGATCGAGGTTGAAACACTAAGGAGCCGGCAACAGAACAAACGACCACTCGTCACTTTACGCCATAGGGGCTAGTATCACGTATGGGGGACATTTTTGGGAACCTAAGATGCCCTCCAACGTCCGTCGGAATAAAGCGGCGTGCTGCGGCTACCAATCCGCATGCCGGCTGACGTCGCTGTGCGTAGAATCTTGTCCGCACCACGGCACGTCCGAGCGTTCGGAACGGCCACCGGGAGGCAGTTAGCCTGACACGTAAGGTTGTACAGTGGGCGCCAGTCCAGATTGTATCACTTTCAGGGTGTTCGAACCCTATGGATTGCACAGCCATTCTCGGAGTCTCGGAGTAGGGTCGGCACGGCTATCGGGTACCTCGAGCAGATAACCGCCATGTTCTCGCCGATACCCAATTTTCCTTTCAGCCTTTACCCGCCAGGCGGTCCCGACACCATACGATAGCAGGTTTTGCACCCTAACACGTGTGGTGTCCCCGGCTTCGGGATCCACCATCTTTCTGGATCCTGAGGCCAAAACTATCAAGTATTGTGGTGAGAAGACAGGAGGTGCTAAGCTGAGGCGTAGTATTGATACGGAGCCCGTAACCGGGATTCCCTAGGGATCCCAGAGGACACGGGTGGACAGGTCGAACGGGCGGCTTATTCGTGTCAGATCATTGATCTAGTGGATTGCAACACTCATGATTGGTGGAGTGAACCCAGTCGACTTGGAATCCGCCGATCGGGACGTAATCTCCCCACGGACGGCTGCTTAGGGCCCCTGTTGTTTTATGCCGGCTAGGTATAAGACTCTTTGAGTGCAACTGTTACAACAGGCTTGTTACGTATGTATCATCCAACGGCTCGCTTCGTAGGCTCATGTGTTGACAGTCGCGACATGCCATCATTCAGATGTCGGGCTCCCCCCGAAATGGTACTAGGTCTTTATAATGACGTTAGTATTTACGAGTGGGATGGACGTCGACCGCAAGGAAGGATGATGCTAGACAATCATTCTTAAATGACAAGGTCACACCTTTAACTTTCCCGTTAGCTAAGAGTACCCTAAAAAAGGGTGTAGGCGTAAAGCCGACAACGTGCAGATTTTCACTTCTGGCGGGCGCAGCGTTCTATTCGGCCTACTGTCGGACGCCAATGCGCGTCTAATTGTCTCATACACCGGCGTTGTAATGTTGTAGCTGTATCGCGGA", alg.reverseComplement("TCCGCGATACAGCTACAACATTACAACGCCGGTGTATGAGACAATTAGACGCGCATTGGCGTCCGACAGTAGGCCGAATAGAACGCTGCGCCCGCCAGAAGTGAAAATCTGCACGTTGTCGGCTTTACGCCTACACCCTTTTTTAGGGTACTCTTAGCTAACGGGAAAGTTAAAGGTGTGACCTTGTCATTTAAGAATGATTGTCTAGCATCATCCTTCCTTGCGGTCGACGTCCATCCCACTCGTAAATACTAACGTCATTATAAAGACCTAGTACCATTTCGGGGGGAGCCCGACATCTGAATGATGGCATGTCGCGACTGTCAACACATGAGCCTACGAAGCGAGCCGTTGGATGATACATACGTAACAAGCCTGTTGTAACAGTTGCACTCAAAGAGTCTTATACCTAGCCGGCATAAAACAACAGGGGCCCTAAGCAGCCGTCCGTGGGGAGATTACGTCCCGATCGGCGGATTCCAAGTCGACTGGGTTCACTCCACCAATCATGAGTGTTGCAATCCACTAGATCAATGATCTGACACGAATAAGCCGCCCGTTCGACCTGTCCACCCGTGTCCTCTGGGATCCCTAGGGAATCCCGGTTACGGGCTCCGTATCAATACTACGCCTCAGCTTAGCACCTCCTGTCTTCTCACCACAATACTTGATAGTTTTGGCCTCAGGATCCAGAAAGATGGTGGATCCCGAAGCCGGGGACACCACACGTGTTAGGGTGCAAAACCTGCTATCGTATGGTGTCGGGACCGCCTGGCGGGTAAAGGCTGAAAGGAAAATTGGGTATCGGCGAGAACATGGCGGTTATCTGCTCGAGGTACCCGATAGCCGTGCCGACCCTACTCCGAGACTCCGAGAATGGCTGTGCAATCCATAGGGTTCGAACACCCTGAAAGTGATACAATCTGGACTGGCGCCCACTGTACAACCTTACGTGTCAGGCTAACTGCCTCCCGGTGGCCGTTCCGAACGCTCGGACGTGCCGTGGTGCGGACAAGATTCTACGCACAGCGACGTCAGCCGGCATGCGGATTGGTAGCCGCAGCACGCCGCTTTATTCCGACGGACGTTGGAGGGCATCTTAGGTTCCCAAAAATGTCCCCCATACGTGATACTAGCCCCTATGGCGTAAAGTGACGAGTGGTCGTTTGTTCTGTTGCCGGCTCCTTAGTGTTTCAACCTCGATCTAGTGCAGTTGGATAATAGTTACTTGAAAGAAACTCCTGATGCGGGTCCAAGATGAGACAGTCTAGTTGAACAATGAGTTTTCTGCGGCTGATCCAACCCCTGTGACTGCAAAATACCCAGCCAGTTCCACCCCTGTACGGCCTCTCTACCGGAAATACCGCACATAGTTTTCGTGCGAGAGCCTCCAGATCCATCCCACGTTCAATTTAGCTTGACACCTCACTCCAAGTAGGATCTACGAGGCCGCCATATACCTTCCGAATCGCCATTGCATGTTGAAAGCGAGCATGTTGTTGATGAGCCACGACTCACTAGTCCTGTCTGATATATAGCTCGACTTAGCGTGTGCGCACTCACGAATGGACTGGGACCGGTAAGCCGACCGAGTCCGGAAGGAAGCGTAAGATCTTCCATAGGATCCACTCTATAACCTGGCGCGGTATGCCCGCAAGCTTCGGAGCAGCCAGAATTACCAGTTCTGTAATAGTCGTGAGCCACGACCCGGGGAAGTCTGTGAGTCGGGGATTGCACTCATCGCCGGGGCGCCTACAACCGCCGAGTTCGAAACCATGTTTATCATACCGGGCCGCTCCTTAGACGTGGTAGGTCTACATTATCAGTCAAGCCCACAGGGTCACAGACCTTGGCAAATTGCTGAAGAAAAAAGAGCGGGTTAAGGCTTCTAATTAAGAGCACAGAGAGAGCACCATTGTTCGACCCAACTTGCTTCTACCGAGCCTGAGTCACGGTATGCGGTATCACTTTTCAGCCGGTGTGAATGGCGGACGTTGTCGGGTAACGTGTCCCACTTAGCCGAGGGAGAATTTTGCCGTAGGGTGATGTGTTATATCCTTCTCAGTCTCGTGAAGATCTCTCCGCTTATATGGGCCCCTTATTTGATCAGATCTAAAAAATCCGGCTGCCTACGATGTAGACGCCTAAAACAAGAAGAGACGTGAACAAGTAGGTGTACAGGCGCGACTAGTGGTCAGGAAAGAAGGCGAGTGTTCCCATTATTCCGTGAGTGCCGTAGATGATGGGTGTACCGAACGGTGCTTGAGGGTTACCCGAATAAGTTACTTTGGATACTTACACTTCTTTAAATTGCAAAGGCGAGTAGATCCAGGCTGGAATACTCACTCGTGGTCCACCGAGGGTTGGAGCGGTAGCTTCCTCCACTCATCCAACAATTGGGGGAGGACTCGCCATACGTAAAACGGACAGTACCGGCGGCACCTATGGTCTTGCAAAGTACGCTTCTAGACAGTGCATGCCCTAGTGGCACTCGACGTGGCCTCCGGACTTGGACGGCGAGCATAGACCTCCGATCAAGAACAATGGGCCTCTGACTTGTCTTCCTGGAGCAATTGACCGCGCTTGAAACTAGAACGCAGGAGCTGCCAGCGTGACCCTAGCCTAACGGATACTCGTTTGTAAGCTTCGCAAGTATGGGCGTGCATCCCAGGCGATAGCAAAGGACACAGTAATGTGTTGGCATCAACAAGTGTATATGAAAGTAATCGACAAGCGTTATGATTAGCACGTGGCACTCTATACCCGAAAAATTGTTAGGACCTGAGCAAATAAAATTCGCCAAGTCGCGTTTGAATATTACTACACCTCGCCGTCCGCCCATTGTGCGGGGCCCTTGTCATTGGACTAGCGACTACATTTTTCATCATATTAGTTCAGCTATGTCCCATAGCGTGTGTCAGCAGATTAATTAAGAGGAACGGACAGAGGATGAGCATAGGCCGAGGGGTCATAGAAGGGTTAGACGCTGTCCTCCGCGAATCCACTTATGGTAATCGTCTAAAGGACATGCGGAGCCCCATCTTGGCTTGGCACATAAGATTTCAGACTACAGCTAAAATAGGGCGGTTCAGCAGCATGAGACATCACATCTCACGCGCGCAAGTCAGTGCGATAAAAAGAACTGCGTGCGGAAACGATCTTGGGTTATTGTAAGTTGATTGTGCTTGTCCTGGGTCTCGGCATGATAAGAGAACCGAAGGGAGACATACGTATGGAGGTGAGGATGGATTGTGGAACAGTTGTGATATTGCGATCGTCTGAGCATTTGGTTCCCCAGTTGTTAGTAGACCACCACTGCGTGATAGATGCAAGACCCAGTTCCTGTCTTCAAATTGTGGGTTGACCCACTGTACTGTTATAACCAGCAGCGGTGGTTTCATAATCAACGAGATAAGTAAATACTAAGGAGACGGTCGTCCGACCGGTGATTAGACAAGTTGCCTTGGCCGTTTCCGACCACAGGCATCACAGTCGTTCTGGAAGAACACATCAGTCTACTGTGCCGGTACTAACCGTACATCCCTACAAGTGTTTGTACGTCAAATGCGAATAGATCTAGACGGTAGAACGGAACGGGCCGGGGTGACTAACTGCGACACTATAATGGGGGATGAAAACCTTGACCGTTGGCGTCAATAGTAGTCGATTACTTAAGTTGGTTGTGGACCGGAACGTACGTAGGTGTATTTCGCGGTACCTTCGGGATTTCGTGAGCGCGAGGAGGGAGATAAACGTCGAAACTCCAATATGCCCATAGTCTCGAATTATGCATTTGACATGAGCCTTCGATCCCACAGCGCTTACAATGAATTTGGCTATCCCAGTTTGCGGCTCGGGTAAAAATTAGTGTGACAACTGACTAATCCGCGCCCCTATGAAGTCGATGTTCGCGATATTAACGCGATCTGATGACGATGGTGAGCAAAAGCCGCCCATTCCAGCAGCTACTTACTTTACGCAACAAAAAACATGGGATCTCTATAGCTTTCGGTACGAGATGGTACATAAACCGAACAGACTATGACATGACAGTGAGTTGGGCTCGACCTATTCGCGCACATGAAGGTCATCGTATCCCTATTAGGCATTCCCCGTGAGGCGACGTGAAAATGGGTCGTCCGAGGTAACCGACGCTCACATATCCGAGACCACGACCAGAGCCTCCGCCACTAAGATGTCCTCGGTTTTAGAGTTCATCGAGCAATATGGTAACCCAACCCGTATAAGGTTACTCCAGTACATCCACCAGGCATCGAGACCGATAGCACTTTATTTCGGATTGGCTATGTTAAGGTGAATTCTATAATTCAGCACGAAGACAAGCACTTGCTCACCTTCATTGGAACAATGTCATATCCGTCTGATTCCTCGTCGGGGACAACAACCTGGTGGGACAGCTTCCCGAAATGGTCTCCCAAGGGTCATCACTATGCAAGACGGACTCACGTACCCGCCGTGTCCGAGTGCACACAGCCATGAACGATGAGGAGGTCACCAGTGGTTAACGGGAGAGACTACAGAGGACTTCTAGGTGACCTCTCTCCAGAGGATCTAGCCCGAGTAGCACGCGGATCTACGCAACTTTATAGGCAACATTGATGGTTCCCTTGTGAGTGAAGATGACACGGCTACAATCCGGACCAGACAAGTCACGAGATAGAGCACAGGACCTCTAGAAATATTATCTAATGTTGGTACTGCCAACCAGTAGCCCCACTAACTCGCCTGGCCTAAACGAATTCGCGTACGTTACCCTTGAACAACTGGCGCCCACATCCTGCCGAGGGGACTAAACAATCAATATGTCACACTGCTAACGGCGCCCCCTGACACGAGAGTAACTTATGTTGCGCAGTAGGCTGCGACGTTGTGCTGGACCCGAGAGCGGTTTACTCCGGCGTCTCGTGGAGAAGCTACCATGGTATCTTCGCACCAAACCTGCACCGTGCCTGTGTCCCCTCACCACCTTTAAACCAAACGAGACACCGTTCTTCGCCCGACGCTATTGCCACTTTGACTGGCATCTCTCACTATCGGGCGTGCGGAGGTAACTAGGGTGTTTGCCCTGACCTAGATGGTTCGCTGTGCCGCTAGACAGCCTATGATATACCCGCCTGCATGTCCTGGCCCAACCAACGTATTATGGCGGTCGAAATAACTGGCCATTCGCTCAACCCAGCCACCTCCCCGGGCAATAGTATGACCCGGCCTGCGGGAAGACACGACCATTAGTCTTTATCCCATGAATTAAGCTTGTATAGTCCTTTTAGGGGCGAACATCCCCATCCCGCGCATGACCCCGTTGAGTCATACAAATGAGAAAGTAGGAGCTTGCTGATGACTTAATCTATTTCGATTTACTTACGTCATCGTGCTGAACTTGTAGCCTTAACTATTTAATTAAGGTTAGACTTGTCAGCTCGAGGAGAAAGTTTGGTTTATAGACTCAATCTACAATCCACCTACCACTCACTAACTACAGCGGTCCCGACATTTACTTGGAGAAGTCCCTCTATAAGATTAGTACTATGATTACCCGGTCGATGATCGCATCTGTAAACTATCCAGCCTCTCACTAGTCAGCGTTCCAGCAAGCACAGTCGGACTCTCCGGAGGCAACGCTAGAGCTCATCAATCACGCATGCATTTCCCTAGTTGATACAGTCTCACATACAGGATTCTGGTCAGCGTATTATCTGTTCTTGTGGGCGTTACTACGGCCCACTTAACACCAATTGGAGGCGGAGGGGGTACTGTGATAATTCTGGAGAAGTCTATAGTGAGCTATACAATCCACACGCCTGCCACAGCTAGATTGCAGTCTGTTGAAGAGAACTACGGTACGGGTGACGGTTGGCATCATAACATTGTCTTCGGGTGATTGACCACTAACCGACGCGCCATCCTCGACATAGCCTGAATCTATTACCTGCCCGATATAGAGTCCCAATCGAACCGCGGATATCGAACCCAAGACGGGCCGGAGCCTGACCCAGGGATGGGGGACCGCAGTCTGGTGCTAACAGGCAAAACAACATTAGCTGAGCATCCAAGAGTGAGTACCAGACACTGTGGCTGGAATTACCACGTACTAACCGTAGACTACAAGATCATCGCTGTATCCCGTTAGCGTAACATAACAGTGATGGCTATCATCGCGCCGTACCGCCGGTTAGACGCTACCGGTACATCGGCGGACAGTCCCGGCTCGCTCACAGAATGGACTACATTCTTCGTCGGTGAGGTCGTTTTCGTAAGAGACGTCTGAAGAGCAAGGATCAGAGTTTGGAATTCGAGTCTGCTATTCCATAGCACCCGGGTATCACGATGAAACGCTTTAAGCATTCTGTACTAAAATCCTCCATCTACAAGATTCACAGCTCCGTTCGCACGTGATTTAGGTGGTTATAGGGGACCATAGACATTATTCTATCCTACGAGATGGGATATGTCCCTTGAACCTGAATTGGGCGATAAGGCGGGTAACCGGACTAGATTGCGAATGGGAACTTTAGCACGTGCTCAGTCGGCTTGATCTGTATATATGAGATCTTCAGCTCACTGGAACTCGACAGTACCTGCCAGACTTGGGTAGTCGTTAAATTGGTTCGACAAGCCTTCACAGGACAGCCTAGGGCTATTGATAGGAAGTTCTGGATTTAAGGCTGCGAGTGAGCGCCCAGAAGTGCGCATGGCCGCCAGAAGGGCCGGATCAGAGTAAAGACCCGCCCTGTTCACCAAGTATCCCTAAGATCCGCTTATATTTTTTCGCCAGTTCTTTCTCGTATAGCTTGGAATATGGGATACTGACAACCCTCAAGGAATGAGCCGTGTAAGCAGTCATGTGGGCGCTCGTCCTGTTTCGGCCGAATCTGGGCAAGGAGCCGCAGTCCGGTTTGTAGTACACGTTTTCTACTCCTGACAAAATCCAAGCCGGGGTATAGTGCTCTCACCTTCATTCGCAGGGTTTTCTCGACTGAGCGGCGGCAAATCCAGAAAAGCAGCTGTACATCTTCCTCTGCCGTTACGCATGCCACATTATTTAAGTTAAGCACTCATGACATATATAATCTTAGGGTACACGGAGCTTAAAGAACACCGAGCGTAGTCCGGAATTTGTCGGGATAGCCCTACTACCCGCATGTTTTTGCATTTAATGCCGGGGACCGCCTCATGTCAGGTGACTATCTTAAAAATTGTACAGGTTTATTCAAACTGAGTACGCCACTGTTTGCGCGATATTAAAAAACATTTCTTTGAGTTTAACCTTTCTTTGCGATCTAGGGACTTCCGGTCAGCTGATGATCCATTAAATCCCGACCATTTTGTCTTTACGACATATGTCGCTCGTTGAACACTCTGATATACGGCCAGATAGCCCCCACGGCGCCATCTGTCCCAGATGCACCAAGGTCGATACATACATGTCCACAGCCCACATCCGGAGTATGCGCCGAGGAAATTCTGAGAACAAAGCGGTCTAGCGCACGCAGATAACGGGGGTGATCGCCTACCAATCCGACTCTCAGTCTTAAGCGCGCTCATGACAGTATCACTTCAAAGTAAGGGAGATAGTGCTCTTCTGGGAATCATTTTAATGATCGGCTTTGGTTCCTTAAGAGTATTCTTTTCATTGAGGGGTGACAAGTCCTCAGCTCGCACAACACGGCTATCACTTATCTACGGATTTCTGGCATTTATAAAATATGCACGATGAAATGTCGCCGTCTCTTTCCTTGATTATAATAGCATACCCCGGCCACTCCATGAGCACCTTAAGGTCGTACGAAAAATAGTAGCGACGGATCCACACCAGAAGAACAGCAGCGCCCTGCGGGCCCCCTGATCACTCCCGGAACGATAGAAGGGGGTCGCATAGTACCTACAGGCCCCGGCATGACGTGGCAACAATCTATCAAAGATCTGCACAGTACAATATAGGTTGAAGACCTATTAGGGTCAATGAAGTAGTGTAGTTTAAACTATGCACTCATGAGCATCCATAGGAACATTTCACCAGCTGTTGGGGGGAACTTTGTTTATAGTCTGAACGCGGTGCGTACCACTGCCGCTCTTATGAAAGAGCTAGTGCGGTTGGGTAGACCGGGTACAAGCGTCGTCTACACAGCGCCCTGGCCCGTACCGATGGTTGCGTTACGATGATTGGAGATATCTCAGATGGCATCAAATATTTACTCTCCTCAGATGAAAGGCCCTGCTTCCCGATTCTCTTAGATACTGAAGTTCGTCCCAAGGCCCGATGACCTCTGAGTTAAGAACTGAATTGTCCGGTAGGCGGAATGGTACGCTAGACGGTGATGGTGCATACCCAAGACAAGCTCTGTACTTCATGGACCGAAACAGAAAACTGTAAGCTAAGTGTTCACGCCTACATCTGTTGAGCGAACCGGTGGGCATGCGCGAGTGAGGTGTGTGCAGTTCACGGTGGTACACCGCACACTGGTACTCCGCGCGGGTACAACTGATGTCGACGATAATCATCGAAGCGACACAATTTAAAGCTGGCAAGCTCGGCCTGATACTTTGTAGTTACACCCTCAGAGTAAAGAAGGCGGGAGACCGGATTAAAGAATCTCTAATAAAG"));

        System.out.println(alg.reverseComplement("GCTAGCT"));
    }

    @Test
    public void patternMatching() {
        assertEquals("[0]", alg.patternMatching("ACG", "ACGTA").toString());
        assertEquals("[1, 3, 9]", alg.patternMatching("ATAT", "GATATATGCATATACTT").toString());
        assertEquals("[23, 38, 45, 76, 83, 90, 97, 104, 146, 251, 259, 331, 338, 345, 394, 402, 410, 417, 424, 441, 469, 542, 583, 590, 610, 705, 724, 833, 888, 907, 956, 963, 1048, 1093, 1100, 1201, 1210, 1217, 1273, 1300, 1308, 1315, 1351, 1397, 1416, 1423, 1453, 1483, 1512, 1519, 1537, 1549, 1663, 1698, 1714, 1721, 1753, 1761, 1782, 1789, 1913, 1922, 1980, 2061, 2142, 2149, 2165, 2217, 2318, 2325, 2375, 2448, 2464, 2480, 2520, 2527, 2574, 2591, 2599, 2643, 2663, 2710, 2717, 2741, 2762, 2769, 2960, 2980, 2987, 3002, 3009, 3048, 3060, 3069, 3084, 3091, 3098, 3113, 3174, 3190, 3232, 3264, 3281, 3296, 3304, 3312, 3337, 3379, 3414, 3421, 3461, 3510, 3558, 3565, 3604, 3611, 3634, 3641, 3692, 3699, 3720, 3731, 3777, 3803, 3810, 3817, 3846, 3886, 3901, 3908, 3929, 3936, 3952, 3993, 4030, 4049, 4068, 4089, 4096, 4114, 4134, 4150, 4157, 4164, 4217, 4291, 4387, 4433, 4538, 4617, 4653, 4701, 4717, 4756, 4763, 4783, 4791, 4798, 4820, 4827, 4860, 4867, 5035, 5066, 5073, 5100, 5107, 5135, 5166, 5260, 5268, 5285, 5330, 5346, 5355, 5362, 5369, 5377, 5384, 5425, 5465, 5503, 5510, 5519, 5549, 5572, 5579, 5640, 5653, 5711, 5737, 5744, 5767, 5782, 5798, 5838, 5856, 5925, 6008, 6038, 6053, 6060, 6085, 6092, 6126, 6133, 6141, 6148, 6186, 6193, 6200, 6250, 6268, 6286, 6307, 6326, 6355, 6375, 6391, 6408, 6452, 6518, 6544, 6564, 6584, 6646, 6667, 6700, 6745, 6768, 6796, 6847, 6884, 6904, 6920, 6984, 7135, 7168, 7185, 7248, 7255, 7283, 7300, 7307, 7324, 7367, 7382, 7389, 7397, 7433, 7480, 7513, 7576, 7583, 7590, 7597, 7636, 7665, 7683, 7761, 7777, 7811, 7837, 7865, 7925, 7932, 8012, 8072, 8079, 8100, 8131, 8138, 8145, 8177, 8184, 8258, 8265, 8395, 8402, 8409, 8458, 8477, 8499, 8508, 8620, 8669, 8694, 8747, 8754, 8841, 8859, 8866, 8891, 8968, 8999, 9069, 9097, 9120, 9162, 9177, 9220, 9289]", alg.patternMatching("CCAAAACCC", "GTCCAAAACGACGCCAAAACGACCCAAAACCCAAAACTCCAAAACCCAAAACCCAAAACGTTCTCGTGCCAAAACACCAAAACCCAAAACCCAAAACCCAAAACCCAAAACCCAAAACGTCCCAAAACGGCCCAAAACTAACGAAACCAAAACCCAAAACAGACCCTGTCCAAAACAACCACACGCCAAAACTCCAAAACGTACCAAAACTAGTGTGACGGCCAAAACGTCAGCCAAAACGCCAAAACAACCCAAAACCCCAAAACCCCAAAACTGACGCCAAAACACCAAAACTCCCAAAACGCCAAAACGCGGTCGTCGGTCCAAAACACCAAAACCCAAAACCCAAAACCCAAAACAGCCGACCCAAAACGTCCAAAACGTCGCCAAAACTCCAAAACCCCAAAACCCCAAAACCCAAAACCCAAAACCCCCAAAACACCAAAACCCAAAACTCACCAAAACCAACCCAAAACCCAAAACGCCAAAACACCAAAACGCCCCAAAACCTACCCAAAACGTCGAGCTCTTTACCAAAACTCCCAAAACCCAAAACATCCAAAACGATGACGTGTCCAAAACGCCAAAACCCAAAACCCCAAAACAGCAACCAAAACCCAAAACGCCAAAACGCTCCAAAACTTGGGCCCAAAACTTATGCCAAAACAGAGCCCTTGCCAAAACACACGACGTCGCTCCAAAACTCCAAAACCCAAAACAAGAGCCAAAACCCAAAACTACGATCTTACCAAAACTCCAAAACCGCTCCAAAACGTGCTCCAAAACGACCAAAACGCACACCAAAACACCCAAAACCTAATGTGATGTGCAGACCAAAACCCCAAAACTCCAAAACCTCCAAAACTTTCAGCCAAAACTCCAAAACCTCCAAAACCCAAAACCAAGCCCAAAACCCAAAACTCCAAAACTCCCAAAACGGACCCAAAACACAACTACCAAAACCCAAAACCCAAAACACCCCCAAAACGAACCAAAACAGCCAAAACATTAAAGTAGCCAAAACTAGCAAGAAAGCCAAAACAACTCACCAAAACCCAAAACTCCCAAAACACCCAAAACCGGCCAAAACGAACCAAAACCCAAAACCCCAAAACATTTGCAGAGAGGCCAAAACCTGTGACCAAAACGGTGTAGGCGCCAAAACGTGTCCAAAACTTACTGCCAAAACAGCCAAAACTGCCCAAAACCCCCAAAACCCAAAACCCAAAACAAACCAAAACGGCTGCAGGGTATCCTTAGTCCAAAACTCGGCCCAAAACCCAAAACTGTCCAAAACATTCCAAAACCCCAAAACCCAAAACCCAAAACATGCCAAAACTCCAAAACTAATCCAAAACCCCAAAACCGGCGTTCCAAAACTAACTCCAAAACCTGAGCCAAAACCCTGCCAAAACACCAAAACCCAAAACCCAAAACAGGTACGCCAAAACCTCCAAAACCCAAAACTTAACCAAAACGCGACCCAAAACCCAAAACGGGCCAAAACGATGACCAAAACCCAAAACCCAAAACGGCTCCAAAACCCGGGCCAAAACCCAAAACGCGCCAAAACAACCAAAACTCCAAAACTGACCCCCAAAACAACCAAAACCGCCAAAACCGCCAAAACGGTCAAGCCAAAACCATGCTACATAGGTAGTCGCCAAAACCCAAAACACCCAAAACTCCAAAACCTGGCCAAAACCCCAAAACTCCAAAACCCAAAACCCAAAACATAGCCAAAACAATGGCGCCAAAACCCCAAAACCCAAAACGATTTGACCAAAACCCAAAACCCCAAAACTGGCAGGTACCAAAACGCCAAAACACCAAAACATTCCAAAACGCCAAAACACCAAAACCTGGCCCAAAACTTTAATCCAAAACGCAGAGCTCCCAAAACCAATAAACCACCAAAACCCCCAAAACCCAAAACTACCAAAACACCAAAACCATACGCTCCCAAAACGTCCCAAAACACCAAAACCCAAAACGGCCAAAACTGAATCCAAAACACCAAAACGCGCTACATCCAAAACAACCAAAACTCCCAAAACCAGACCAAAACCCCAAAACCAAATACCAAAACGCCAAAACATCCCAAAACACCAAAACGAATTAGCCTTTCCAAAACAATCTCATCCAAAACCCAAAACCCAAAACGACCAAAACCCAACGTCCCAAAACTACATTTTCCGAGGTGTGCCCAAAACAGCTCCAAAACCCAAAACGCCAAAACTACCAAAACCGATGTCCCCAAAACGCCAAAACGGGGCATAACTGGATACCCAAAACAGAGGAGGTCAATCCAAAACAGGCCAAAACCCAAAACCCCAAAACAATTCCAAAACGGGTCGCCAAAACAGCCCAAAACTCCAAAACCCCAAAACTCCAAAACGTCCCAAAACGCATACTCCAAAACTCCTCCAAAACCATACGCCAAAACAACCAAAACCCAAAACATCCAAAACCCAAAACGACCAAAACCCAAAACAGTCCAAAACGGTCCAAAACAGATTGCCAAAACCCAAAACCCAAAACACAAGCTCCAAAACAAACCAAAACTGGTGTGGTCCAAAACCCAAAACCACCCAAAACCCCAAAACCCCAAAACTGCCAAAACAGGAATTCCGGAAACCCTGCCCAAAACCCCCAAAACTCCTCCAAAACCCAAAACTCCAAAACCAACCAAAACACTGTTTAGAGCTAGCCAAAACCCAAAACCCAAAACGCCAAAACAACCAAAACCCAACCAAAACTCGCCAAAACCCAAAACCCAAAACTTCTAACCAAAACATCCAAAACGTTTCCAAAACTTTCCAAAACGCCAAAACCATATTTCGCTCCAAAACGCATGTTTTTCCAAAACTCCACTGGACCAAAACGCCAAAACTTATGTATTCCAAAACTTTCCAAAACCTTCCAAAACCTCCCAAAACAACCAAAACACCAAAACCTCCCCAAAACCCAAAACAAAGTCCCAAAACCCAAAACCCAAAACTCCAAAACCCAAAACCCAAAACGTCCTCCAAAACGCCAAAACCGTTACCAAAACCCGGTCCAAAACCCCCAAAACCCAAAACACCAAAACCCAAAACCCAAAACCCTACAGCCCAAAACCCAAAACGAATCATCCAAAACAAACACCCAAAACTCCCAAAACGTCCAAAACCGCCAAAACCCAAAACTGCCAAAACCCAAAACTCACCAAAACTATCCAAAACTGCCTAATCCAAAACCCCAAAACGTTCCAAAACTGGATTACCAAAACCCCAAAACGACCAAAACCCAAAACTCCAAAACCCCAAAACCCCAAAACCCAAAACGTTGTCAGCTCCCAAAACCCAAAACTCCAAAACACCAAAACACGGGGCTAAAGCCAAAACCCAAAACCTCCAAAACGCCAAAACGCGCCCAAAACCCAAAACCCAAAACTCCAAAACTCCCAAAACCGAACAGCGCCAAAACCCAAAACTATTACCAAAACCAAGCCAAAACTTATCGGAGACACCAAAACCCAAAACGCCAAAACTGCTCATAGATACTGGGCCAAAACATCCAAAACCCAAAACCCAAAACGACCAAAACTCGTGATACCAAAACACCAAAACCCAAAACCCAAAACGCCAAAACTCCAAAACCCAAAACCCAAAACTCGACCAAAACGCGAGCACCAAAACACCCAAAACTGACCAAAACCCAAAACCCAAAACAACCCCACCAAAACCCGACCAAAACCCCCAAAACACTCCAAAACTCCAAAACGCCAAAACAATCCCAAAACCCAAAACACTCCAAAACGGCCAAAACCCAAAACCCAAAACCCAAAACGCCAAAACCGGGTACCCAAAACCCAAAACATACAGTAGAGCCAAAACGCGTTATTCCAAAACCCAAAACGCCAAAACCCAAAACCCCCAACCAAAACTCCAAAACCCAAAACCCAAAACAACCAAAACCCAAAACGGCTCCCAAAACAGCCAAAACCTTCACCCAAAACCCCTCTTAACCAAAACTCCCAAAACCGTTACCAAAACCCCCAAAACTGACCAAAACCCCAAAACGCAACCAAAACCCCTTCCAAAACTGCCAAAACCCAAAACCCAAAACTCCTCCAAAACCCAAAACGGATAACCAAAACCCAAAACTTCCAAAACCCAAAACCCAAAACCCAAAACTGCGCCAAAACGAAGGTAACCAAAACACCAAAACACTCTCCAAAACCCAAAACCGCGCCAAAACAGTTTCCAAAACAGGCAACCAAAACTGCCAAAACCGGGGTCTACTGACCCCAAAACCCAAAACTGGCCAAAACAACCAAAACGCCAAAACGTCCAAAACGACCAAAACCGGCGCCAAAACTCCAAAACGCCAAAACAGTAAGTCACCAAAACCCAAAACATTCCAAAACACCAAAACACCAAAACGGTCATCCAAAACCCAAAACGTTCCAAAACACACCTTCGCAGTCCAAAACATCAAGGGCCAAAACGTTGATCCAAAACTGGCTTTGCAGCCAAAACAGTTCAGTGTAAGCACCAAAACCCAAAACAACCAAAACGGAAGTCCAAAACTTCGCCAAAACCTCCAAAACTAGCATCGTGTGTACATTTTTCACCAAAACCCAAAACTCCCAAAACGTCCCAAAACAGACCAAAACCCCAAAACATCCGGGCACCCAAAACTGTGTTCCAAAACGTGCCAAAACCCAAAACTGCCAAAACCCAAAACGCCAAAACTAGTCCAAAACGACTAGCCAAAACCCAAAACCCCAAAACTGCCACCAAAACCCCAAAACCCAAAACCCAAAACTCGGACGCCCAAAACCCAAAACCCAAAACGTCCAAAACTCCAAAACTGCCAAAACCCAAAACCCGGCCGCCAAAACCGTAACCAAAACAAGCCAAAACTGCAGACCAAAACCTGCCAAAACTGTCCAAAACACCAAAACATGACCAAAACTCCCAAAACTCCAAAACACCCAAAACGCCAAAACTGCCCCAAAACTCCCCAAAACCAGGTCCAAAACGGCAATCCAAAACCCAAAACTGCGCCTTAACCAGTGACCAAAACCCAAAACCCCAAAACACCCAAAACCGTCCAAAACCCAAAACCCCAAAACTTGCCATCGCTGGCCAAAACCCAAAACTCCAAAACTCCAAAACTCCAAAACCCAAAACAGACCATCACCAAAACACCAAAACTTGTCCAAAACGCCAAAACTACCAAAACGACCAAAACTCCAAAACTCCAAAACGTACCAAAACCCCAAAACCCAAAACCGACCAAAACCCAAAACACCAAAACTTGAACCTCCAAAACCACTGGCTCCAAAACCCAAAACTCCCAAAACCCCCAAAACCCAAAACCCAAAACCCCAAAACCCAAAACCCGGGCACTCACCAAAACGCCAAAACAACAGGCTCCAAAACCCGTAGGCCAAAACTCAACCGGCCAAAACACATCCAAAACCCCAAAACTCCCAAAACTCCAAAACTTCACGCCAAAACCCAAAACCCCCAAAACCCTTCGCCAAAACAGGACAACCCCCAAAACCCAAAACGCCAAAACTCCAAAACCCAAAACCCCAAAACGAGGAAGAGCCAAAACAGTCAAAGCCAAAACTTGGGACCCAAAACTCCAAAACCCACTCCCAAAACCCAAAACCTGGCCAAAACAAGCCAAAACGGTTTCCAAAACACCAAAACCAGCCAAAACCCAAAACTACCAAAACGGTCCAAAACCCAAAACCCAAAACACCAAAACGCCAAAACCCAAAACGCCAAAACCCAAAACCGCCAAAACCCAAAACCTAGTTGCGTCAAACCAAAACAGTCGCCAAAACCCAAAACGGCTCCAAAACCCAAAACCTTCTCCCCAAAACTCCAAAACTTCCAAAACAGTAATTCCAAAACGCCAAAACCTCCAAAACCCAAAACCGCCAAAACGTCAATCCAAAACGTTCCAAAACGATACACCTCTGGACCAAAACCAGTCCAAAACCTGATCCAAAACCCTCCCAAAACAAAACGTGGCAGCCAAAACCCAAAACTCCAAAACCCAAAACCCAAAACAAGCCAAAACACCAAAACCCAAAACCCAAAACTCCCAAAACCTGGGCAACAACCAAAACCCAAAACCCCAAAACCCAAAACCCAAAACTATCCAAAACCTTAGCCCGCGCCACCAAAACCCAAAACCCAAAACCCCCAAAACCGCCAAAACGCTTCCAAAACTCGACCCAAAACACCCAAAACCCAAAACCTCCCCAAAACCCAAAACCTCTCCAAAACCCCAAAACTTAGATCCAAAACCCAAAACAGTTACCAAAACCCCAAAACGGCCCAAAACGTTTCCAAAACCCAAAACAATCCCCCAAAACCCAAAACGCCCAAAACCCAAAACGATCCAAAACCCAAAACACCAAAACAAATTCCAAAACTCCAAAACATCCAAAACCCAAAACTCCCCAAAACACAGCCCAAAACAATGCTTCCCAAAACAATCCAAAACTCCAACCAAAACCCAAAACACCCAAAACAACCCAAAACCCAAAACTGCCAGCCAAAACCCACCAAAACTGACCAAAACCCCTTTCCAAAACGGCCAAAACAGCTCCAAAACCATCCAAAACAAATGTCTCTTCCCAAAACCCCAAAACGCAGCACCAAAACCCAAAACGCCAAAACTCTGTCCACATCCAAAACCCAAAACTAAAAGCCAAAACTACCAAAACGGCTCCTCACCAAAACCCAAAACACCAAAACTCCAAAACCCAAAACACTTGACCAAAACACCAAAACCCAAAACGCACCAAAACTCCCAAAACACCAAAACTCCAAAACAACCAAAACCCAAAACCACCCAACCTCCCAAAACTTCAACCAAAACCCAAAACTTCCGCCCAAAACCCAAAACCGCCAAAACCCAAAACTTACTCTACCCAAAACAACCAAAACGCCAAAACACCAAAACACCAAAACGCCAAAACCCAAAACACCAAAACTAAGGGAAGGACCAAAACACCCAAAACCGCCAAAACCTAGCCAAAACCATCCAAAACCACCAAAACTGCCAAAACATTTCCCAAAACGCCAAAACACGCCAAAACAATCCAAAACCGTCCAAAACTTTGCCAAAACCCAAAACCTCCAAAACTTCCAAAACTCCAAAACCCAAAACTTCCCAAAACCCAAAACATCCGGTCCAAAACACACCAAAACATGCCAAAACGCACCAACCAAAACGCCAAAACCCAAAACCCCTCCAAAACTCCAAAACCGCCAAAACCCAAAACAGCCCAAAACCCAAAACCCCAAAACACCCAAAACCCAAAACCGGCCCAAAACCTACGTATGCCAAAACAGCCAAAACCCAAAACTCCAAAACCCAAAACCCCAAAACCCAAAACACCAAAACGACCAAAACGTAACCCAAAACCCTCCAAAACTTCCAAAACGGCCAAAACACCAAAACGCTCCCAAAACCCAAAACGTACCAAAACTTCGACACACCAAAACCCAAAACGCCCAAAACGCCAAAACTCCCAAAACTTGCCAAAACCGGCCAAAACAGACCAAAACCCAAAACCCAAAACCCAAAACCCAAAACACCAAAACAGAGACCAAAACTGGAACCAAAACCCCAAAACGACCTGTCCCATGACCAAAACCCAAAACTTTTCCAAAACCCAAAACACACCAAAACTGATCCCAAAACGCCAAAACGCCAAAACCTCTCCACCCAAAACTGCCAAAACTCCCAAAACCCAAAACGCCCAAAACCCAAAACTCTCCAAAACCGGCAACCTGCCAAAACCCAAAACCGCTCCAAAACACCAAAACCCAAAACTACTACCAAAACTACCAAAACCCCAAAACACCCAAAACAGCCAAAACGCCAAAACGCCAAAACGTGCCAAAACGCCAAAACCCAAAACCCAAAACGCCGATGAGTGGGCCAAAACGTAAGCGCCCCTAGTCCAAAACCATGTGGGCCTTACTACCAAAACTCCAAAACCCAAAACCATCCCAAAACTCCAAAACGATCCCCAAAACCACGCCAAAACGCAACCAAAACCCAAAACCCCAAAACGTCAAACCAAAACCCAAAACTACCAAAACAAGAAAGTCCAAAACCCAAAACCCAAAACCCAAAACTCCAAAACGTCTAACCGACCAAAACCCAAAACCCCAAAACCTGACCAAAACAGCCCAAAACAATCCAAAACTCTTCAAACCAAAACAGTAGTCTCATATCCAAAACCCAAAACCCAAAACGCGAAGTAAGTAAATAACCCAAAACGCTCGTCCCCCAAAACATTCCCCAAAACTACCAAAACAAATCCAAAACTCCCAAAACAAATGTGACCAAAACACCAAAACTCCAAAACGGTCCAAAACCCAAAACCCAAAACCCGGTGTAATCCAAAACGACCAAAACGGTCCCCAAAACGTCTCCAAAACCCAAAACGCAATCCAAAACCCAAAACGGCTCGTACCAAAACCCCCAAAACCCAAAACACCAAAACCAGGACCAAAACACACCAAAACTCGCCAAAACAACACCTCGTGGTTCCAAAACTTGCCAAAACCTACCAAAACTCCCCAAAACACCGGAGCCAAAACCCAAAACAGACCGGTGGTACCAAAACAGCCAAAACCAGTTGCCCAAAACCCAAAACTAACCAAAACTCCAAAACCCAAAACGACCAAAACGAACATTCATGCCAAAACCTGACCGGCTCCCCAAAACCCAAAACCCCAAAACAATCCAAAACGGCCCAAAACACCAAAACGGACGTGCTCCCAAAACATAGGCCAAAACTCGGGGCCAAAACTCCCAAAACCCCAAAACGAACCAAAACCCAAAACCCCAAAACGTCCAAAACTCCAAAACCCATCCAAAACACCCAAAACACAACACCCAAAACTGCCAAAACGCCCAAAACTATCGACAATTTTCCGGCCCAAAACCCAAAACGGAAGGCTATCTAGCGACCAAAACCCAAAACGCCCAAAACGCTTGCCAAAACACTATAGGTTCTCCAAAACCATCCCAAAACAAATCCCAAAACCCAAAACCAGCCCAAAACTTTCCAAAACCCAAAACGCCAAAACACCAAAACCCAAAACTTCCAAAACTCCAAAACGCTCCAAAACACCAAAACCCAAAACACCAAAACCCAAAACTCTATCGCCAAAACGTTGGTACCAAAACTCCAAAACCCAAAACGCTCCAAAACAGACCAAAACGCCCCAAAACTCGCGCCAAAACACCTCCAAAACGGCCAAAACCCCAAAAC").toString());

        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/Vibrio_cholerae.txt"));
            StringBuilder strBuilder = new StringBuilder();
            String str = "";

            while ((str = br.readLine()) != null) {
                strBuilder.append(str);
            }

            assertEquals("[116556, 149355, 151913, 152013, 152394, 186189, 194276, 200076, 224527, 307692, 479770, 610980, 653338, 679985, 768828, 878903, 985368]",
                    alg.patternMatching("ATGATCAAG", strBuilder.toString()).toString());

            List<Integer> positions = alg.patternMatching("CTTGATCAT", strBuilder.toString());

            Collections.sort(positions);
            assertEquals("[60039, 98409, 129189, 152283, 152354, 152411, 163207, 197028, 200160, 357976, 376771, 392723, 532935, 600085, 622755, 1065555]", positions.toString());

            positions = alg.patternMatching("ATGATCAAG", strBuilder.toString());

            Collections.sort(positions);
            assertEquals("[116556, 149355, 151913, 152013, 152394, 186189, 194276, 200076, 224527, 307692, 479770, 610980, 653338, 679985, 768828, 878903, 985368]", positions.toString());

            System.out.println(alg.patternMatching("CGC", "ATGACTTCGCTGTTACGCGC"));
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    @Test
    public void clumpFinding() {
        assertEquals("[GAAGA, CGACA]", alg.clumpFinding("CGGACTCGACAGATGTGAAGAACGACAATGTGAAGACTCGACACGACAGAGTGAAGAGAAGAGGAAACATTGTAA", 5, 50, 4).toString());
    }

    @Test
    public void betterClumpFinding() {
        assertEquals("[GAAGA, CGACA]", alg.betterClumpFinding("CGGACTCGACAGATGTGAAGAACGACAATGTGAAGACTCGACACGACAGAGTGAAGAGAAGAGGAAACATTGTAA",
                5, 50, 4).toString());
        assertEquals("[]", alg.betterClumpFinding("ATCGATACGCGCAACAGGTAAGCCACTGAAGCATGACTTTGCTGTTAATCCGTCACCTTAAAATAACTTGGCATGCGGATGCGGCGGAGCGACTCTGGTCATTTTAACACTGCTTCACCGTTAGTTACCGTGGAATCTTCACTCACATGGACTTCGGGAGTAGTCAGCATACCTGCGGCGGGCGTGGCGTAGTTGGTTGGGTTGGGTTGGGGTTTCGGCCAGCGGGGCTAGGAACACAATGAGGAGAACATAATTCCCGCGACAGGCTTAGGTCGAGAGGTGACCCTGCGATAGAAAGACGAGGTACCAAACCGTCCGACCAAACCGTCGGCTCTGATCGATCCGGCGCAGGTGCGATCGCTTACTTTGGTCGTATCTAGGCTTCCCAGTATGGTAGGAGAATCACCAACGAGTATCGACAAGTATCGTGTATCGACAAGCCGTGACTTCGGTACGCGAGGCCAGAGGCCACCAACCACCAGCCAAGCAGTAGTCACAAAACCCTCGGTTCCCGGACTGATATTTGGAAACATGCACAGCTGGATGGTCCGCCGATCAGGGGCTAAGTCGGTCATTAAGTTCTATTTAACGCCAGTCTGTTGCCCGTTTAGGGATACTTATCCTAGCCACACTACCCCAAAGCTCAATGGACTTACCGGGTCGCCTAGATCCTCCTAGATCCTGGAAACACAAACGTAGGGACACAAACAATTGAAAGCCGCCTTACAACTTGCACGGCCGGTAAAGCCAGCGCTTTTTAGCGAGCGCTTTTTATCCTGGGTGAAAACATTCTAAACATCACGGCCGGTGGCATTATGAAGTCAACGCATCGACAGCGGTCCAGGGAGTCGACAGAAGCTTTGCCGAGTAAGAGCCACCGAGCGCGCAAACCCCCGACGGGCGTAACTTGCATTTGCGCGATTACGGTTAACGATAGGTGGGAGGTCGTGGCGCATATGATGCTTGCTTTCGCGCTTTAGTCTTGATATTTACATCTCTCGAAGGAAAAATCGTGACCGGGGACGCTTAGCGACTGTGCACAATTAGTAAAATCATCATTTTACTGGATACGATAGTATCCTTCAAGTAACCCGAAGAGCCACTCCTCATTCGGAGTTGATACGATGCGGGTAGTTGATAATATGTTACACTATTTCGGTTTCGGTAGAGGCGGGTGTCGCACCAGTCATCAGGCTCTTAGGAAGTTAGCACGAACTAATGGCGACTACACACTGCTGGCTGGACATGACTTCAACCTGCTTTCATGGCGCCCCTATAAGCTATCGTCTCGTGTTTCTCGATAAGGAAAAGCCCCCGTCGTTCTCGATCTATGAGGTTCAGCACGTTCGCAGTATGACATTACAATTTATGTGATGTTCGCCCTCGCTTAGCGGTTAGCCCGGGGACGGTCTCAACTGCTCTCGTGCTTTTACTAGGGGGCCGCGGCATGTTGCCTCGGCCTGTCTTGACATGGAGGTGAGCTCAGGTGGAGGGTCCTCTCTTCCATAACCGCGAACTTCGTCCTAAGACCTAGCCGTGGTGCATTACAGTCTGAGTTTTAGAGAGGCAGGTTGAGAGGGGCCCGTTTGGCTGATGCTCCAGTAGCACAAGCGGACGTCGCAGAGTCTCCGCTCTCACGAGAACCGTGTTGGATTAGCGGCGTCAAAAGCTGGGTCACTTACAAAACAAGGTCGGCGAGACAGTTGCACTTGGACCCCGGGAATATATTATTCTTCCTAAATCCCTCTTATAAGTAAATAACGAGTTATCAGCGAGACGTGGTCCATATTGAGATAGATAAGGCGGGGCAAGTAGAAGCCCCGTATAAGTGACCAGACCCATGATGGCATAAACTTGCAGTAATCAAAAAATCGATTAGAGTATGCCCTCTAAATTGTTAGCAGTGGCCCAGTGAGATGGAGATGGAGCGAAAGCGAAGAAATACTGAGTTCT"
                , 10, 25, 3).toString());

        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/E_coli.txt"));
            StringBuilder strBuilder = new StringBuilder();
            String str = "";

            while ((str = br.readLine()) != null) {
                strBuilder.append(str);
            }

            //this takes 51 min.
//           assertEquals("[CCGGCAGTT, TTACGCGTC, GTAGCCGAG, CAAGGTCGG, TTCGTACGA, GAGCACCTC, CAGCGCTGC, AAAAAAGCC, CGGCTGCCG, AACGCGTCT, TCGAATCCT, CGGCCCCCG, CCACCTTCG, AAGCCGCTA, GGAGGGTGC, CGATCCCGT, AAGACGCAC, GCGCTTTGC, ACTTTTAAT, TAGCTCAGC, GCGTTTATG, ATGAAGCAA, AAGCCGCTT, CGCGGGGAA, CAGTTGACT, TACGGATGC, TCAACGCCT, TACGGATGG, GGGTCAAAA, ATCCGGGAG, TAGCTCAGT, AAGACGCAT, TCGCTCGCC, TATAAAATA, CTGGCGCTG, CACCCACCA, ATCCGCCCT, CCGAACCGT, TGGCGGATG, CCTACAAAA, ATGGCACTA, TATTGGTGA, CGGCGTAAA, GCCTGCGGC, GGAATTTGT, ATCTAACGC, TCAGGCATC, TTTTGGGTA, CGCGTCTAC, TCCGACATC, CGCCCTGCG, GAGATGGTG, GTGATTAGC, CCGGTTTAT, GCACTGGAG, AGGTGGGTC, TCCGACATT, TACACCGCT, GGTTGCGCC, GAAGAGATC, GCCGCATCC, CCTCCCTTA, CTGAGCTAC, GTGCGAGGG, TCAGGCATT, TGAAGCTAG, CGCAAAGCC, GCGTAGCGC, TTTGCTTAT, CTGCTCCCT, CTCTCGCTG, CCGGTTGCC, CCGGTTGCG, ACGCACAGC, GCCGAAGCG, TTGCCTGAT, TCTACCAAT, CGTCGAAGC, GTAGGCCGG, TTGATACCG, GGGGGGATT, TAGCGTGAT, TTTTGTAGG, TGCATAATC, TGGAGCAGC, GCTTTCTTT, TTGCCTGCG, GACGCGCAA, TACGAGCTC, TTCATCTTT, GCATCTGCG, TGCGCACGA, AGCTGGATG, GATCGGTTC, AAGTGCTCC, TTGGTCGCA, CTGCGCCTG, GCTATAGCC, CAGTCATTC, CCCTCCAAA, ATTCCGCCA, GAAAAAGCC, CCTACAACT, GGGGCTTCT, AGCTCTTCT, TCGGCGGTT, CATCATCAT, GTGGGTCAA, TGCGGGAAT, CGCGTCGCA, GCCTGCGCC, GCGTCTACC, CGGCGGCGG, GCGCCAGTT, GGTGGTGGG, GAGTTAAAT, CGCATCAGG, ATTCTGGTG, TGCTGAAAC, AAGACGCGC, TGCTGAAAA, GAAAGTGAT, GGCTAATGC, GACGCGGGG, ACGCCTTAT, AAGACGCGT, GTCTGTCCA, TCCCGTCAT, CTATTGCCC, GTTCGTAGC, CTGTTCATA, TCGTGGACA, CATGCCTAC, TTGTAGGTC, TTGGCGATA, CCTACGGAG, TGCGGCACT, CAGCCCGCT, GCAAGCTGG, GGTTCGATC, ACCGGTTGC, GCTTTGTTG, GGGGGTCGG, GCTGCTGGC, TGGACAGTC, ACGCGTCGC, AAACTGACC, TCGTTTCCC, CACCGTTGC, AAAAGTTGC, GTAGGCCTG, AATAGCCTG, TCTGTCCAA, CGCCGCATC, TGGCAATGG, GTCACCATT, CGGATAAGA, CTTGTGCCG, GTCTTCAAT, TAGCGTCGC, CCTACGGAT, CGGATAAGG, GAATAGCTC, AGCAGAAGC, ATATCAGCA, CTATGGCAC, AAGATGCGC, GACTTATCA, TGAGCTACG, GGCAATCAA, TGCGGCAAC, CTCCCTTAC, GCGCCTTAT, CGGTCTGTC, CGATGCCTG, CGAGTTCGA, TCTGCCCCT, ACTGAACTG, TTGCGGATT, CACTGTAGG, GCTTTGCTT, ACTCTATCC, CGCACCAAA, CGTACGAGC, CCCCGCTGG, CGCCTGATG, GCTTGGCGA, GATAAGATG, TGCGTTCAC, AGCAGCCGC, ATCCGCGCA, ATAGCCTGA, TAGCGCATC, GATTCGAAC, ACCTGAAGC, GCCGGTTGC, GCCGAACCG, CATCCGACA, TTACGCCGC, GAGCCGGTT, GAGCAGCCT, TGGCAACAG, TCGGAAAGC, CGATACCCC, AAGCTAGCG, AACGCCTTA, TCGGGGCTT, GTTAGCGTC, GGTTATGTT, TTAGCGTGA, TGGTAGCTC, ACAACCGAT, TGCGGATTC, CCTGTAGGC, GGCGCGTCT, GTTTATCCC, AAGGCACTT, GATCCCGTC, CATCCTTCC, ACGCCTGAT, AGCCGCCGT, CAATTCCGC, GCTCCACCC, GTTCAAATC, TCATGCCTA, CCTACGGGG, CAGGCTAAT, TTATCATGC, AATAATCTA, CCGAAGCGG, GGTGCATCC, GCGCACAAT, CCTGAAGCT, TCAGCAGCC, GATGCGCTT, GAGTTCGAG, TAAGACGCA, GTCGTTAGC, TAAGACGCG, ACGATATTA, AATCCGGCC, TGATCCAGT, CGAGTCATC, AATATGGCG, TGCATCCGG, TATCCAGCT, TTGCCGACC, CTGGGAGAG, TCAGTTGGT, TATCCAGCG, CTGGAGTTT, GAAACTGAC, TTCGAACCT, CGCAACAAC, TGACTCGCT, CCGCGCAAA, CGGATGCAT, GTGAACGCC, AAGCCGCCG, CGGCGCTGG, GCGCATCAG, TCCGACAAC, TACTTTCGT, CCTCCAAAA, CACCTTCGC, GCCCTGCGG, TTGAAGTTG, GGCGCGGGG, ACCCACCAC, AGCGCGTCT, TCAGGCAAC, GTTAGCTCA, ACGCGTTAG, TGCCGACCT, ATTACGCGT, CCACGTCCG, GATCAGCAC, ATTGGTCGC, GATGAAATG, TTAGCGTCG, TTTCAATAT, GCTCGTCGG, TGTGAAGTG, ATCCCCCCG, TGATGTTGC, TCAGGAGTT, TTCGAATCC, CCGAAGGTC, CCTACGCCA, GCAAGCGTC, AGTTTGGCA, TATGGATTA, ACATTATTG, GGGGGACTT, AAGCGGCTG, CCCCGGTCG, ACCCCGTAG, CCTGATAAG, CGTCATCAC, CACGGTCTG, CCCCCCGGT, CATCCTGCA, GGCCCCCGC, CGCTGACGC, GCCGCCAGT, AGCGGGTTT, AGCCTGGTA, GCCGCTGAC, TCAGCTGGG, GATACCCCA, CGAGCTCTT, GTTCGAATC, CACTTGTGC, GTTATGTTC, GCGAAAGTG, CAACAGGCT, TTGTAGGCC, TTCGTAGCC, ATCAATGCC, GATCCGCGC, CGTAAACGC, GTGGACAGT, GCTGCTGCT, GCCACCTTC, AGCGCAATA, GTAGCGCAT, AAGCCCGTA, TACGGTTAT, AGGCACTTG, AGCCGCTAT, GTTCACGCC, AGCGCCTTA, AAGCGTAGC, ACCTCCGAC, GGGGAAGGA, GGATGCATC, CCTTGCCAA, GTACTTTCG, GGGGGGACT, GGTTCAAAT, GCTGGGAGA, CCGTTGCCG, ACGCGACTT, AAGCGGTTG, GGCAGCCCG, CAGGCAACG, TGAAAGAAG, CGGAGGGTG, CATCAACGC, GTTTATGCC, GACGCGTTA, GGGTCGCGA, GGGAATAGC, CCGCCGTCG, ATCCGGCCT, CTTATCATG, TAGGTCGGA, CGACTTATC, CGCCGCAGC, AGGCCTACG, TCTCTCGCT, TTGGCAACA, GCGGATTCG, CATTCATCT, GCTGCTGAA, TCAGGCAGT, AGGCCTACA, CTCGTCGGG, AAGTTGCCG, CCCCGGTGT, TGGGAGAGC, GCAACAACC, CGCTGTGAA, GGGGAACAC, ACCGTAGGC, ACCCACCAA, TGCACCTTT, TTATGTTCC, TAGCCTGAT, ATCCGGCCC, CCGCAGGCG, GTCGGGGTC, CGGATGGCG, AAAGCCGCC, GCGACCAGC, GGTCGATCC, CAGGCCTAC, CAACGGCTG, TAGCCGAGT, CATGCCGAC, TCACTGCGT, GCGCGTCTA, CGCTGATTG, TGATAAGAC, GTTCACGGT, CTTCGCTCG, GATTTTGTA, GCGAGTTCG, AACGCCTGA, TAGAGCACG, GCGATACCC, ATCCCCGCT, CTACGGAGG, CCCGCCGAA, GCGCGTCTT, GGATTGACT, CATCTAACG, TCCGGGAGG, GCGCGTCTG, CAGCTCCGG, CTGCGGGCA, AGCAGCCTG, CCGCTCACT, AGTTCGAGT, CTGCCGGAT, GACCGCTCG, AGCACGACC, TATGGCACT, GGGTCGGCG, CAATATTGG, TAAGCGTAG, ATGCGACGC, AGTCTCGTT, ATCCGGCAA, ATCCGGCAG, CTTATCAGG, AACCCGAAG, CCCCTCCAA, CACCTGAAG, GCGGATGCG, ACCTACGGT, CAAGCTGGA, TCGCCCTGC, AGCAACAGG, CTTCGCCCT, TTTTGAAAG, TCCGCCACC, CAGCCGCAA, CGCACGACT, CGAATCCTG, ACACTAACA, GGAACAGCA, GGAGGGGGT, CGTTAGCTC, GATACCGCT, GAGCAGTTG, AGACGCGCA, GTCGCGTCT, CCTACGGTT, CCGTAGGCC, GGGAGAGCA, CGGATGCGC, TGGAACAGC, AAGCGGGTT, CGGATGCGG, GGTGGAGCA, GCTGTCGCG, AAAGCCCGT, AAAGCGGCT, GCTGTCGCC, CTGGTAGCT, GCGGGTTTT, AAATCGCAG, AAAGCGGCA, CACGCTGCC, TTACGTAAA, CGGCGCGAG, GCAACGGCT, TAGAGCAGT, ACGCGCAAG, CAATTGGTC, CAGCTGGGA, CAACCGGTT, GGGGGATTG, GGACTTGAA, CACGTCCGT, ATGCGCAAG, CTGTCCAAC, CGATCCGCG, AGAATATTT, GGCTGTCGC, CAATATCAG, GCTTCGCCC, GATGCGCAA, TCCAGACGA, CCCCCGCAA, TGATAAGCG, TTCCGGGTA, TGGCGCGGG, TCGGGGTCG, GGATTACTC, GTGAGGGGG, CTGCGGCAA, AATTCCGCC, ATCAATTGG, GTAGAGCAC, ACATCCAAC, TCCGGTTAA, TGAACTGTA, AACCTCCGA, CCCGCAACC, TGGAGTTTG, GTCGGGCTC, CTGCACGAC, GAGATGGGA, GCGCTTCGC, GATGCGCCG, CGGTGCTAC, GTAGAGCAG, GCTGGCAGT, CGTAGGCCG, AAAGCGCGC, GACATCCAA, ATATTGGTG, CGCGTTAGC, TTTAAATAT, GCGGTTACG, GCTACGGAT, GGCCTGATA, GCACCGTTG, GGTGCTACC, ACACCGCTG, GCACAGCGT, GCGGCACTG, CGAGTCTCG, CTTCTTTAA, GGCGCAGGC, GCAGTTGAC, ACCGCTGTG, ATCGCAGCG, GATTGACTC, GTACTCTAT, GCAGAAGCA, GACCTTTCG, GGCGGTGAG, CGAGGGGGG, GGGCTCATA, TGAACTGGC, GCCGGTATC, TCGGGCTCA, GAAGAAAGC, CCCGGACGG, AGGAGTTAA, CGGTTATGT, GCCGACCTG, TACGCCAGA, CAACAACCG, GGCAACGCT, ACCTGTAGG, CCCGTAGGT, ACTTGAACC, CCGCTACTA, GGCGCACAA, GTTCGCCAC, AAATGGCGA, CGGTTACGC, AGTCGGCAC, AAATGGCGC, TTCGCTCGC, AAATGGCGG, CTGTGAAGT, GGGGTCGCG, GTTTCCCGC, CGCTTTGCT, GCAGGTTCG, ACGCCAGAC, CGTGATTTT, ACCGCTCGG, GAAGCGGGT, GCCCCCGCA, AAGCGGCAG, GCCAGACAG, GATGCCTGA, CCGCCCTAC, ATTCATCTT, CGAAAAAAA, TACCGCTAC, CGCTGTCGC, GCAGAATAT, ACGGATGCA, ATGCCGCAT, CGAAGCTTC, CTTACCGCT, TGCTCCCTT, CTTATCCGC, CTTATCCGG, TGAAATGAT, CAAAGCCGC, TGGCGCTGC, CCGCTATTG, CTTGGCGAT, CGCCGCGCC, GGTCGCAGG, GGACGGTGC, CCGTCGAAG, GGCAACGGC, GGTTCGAAT, TGCGCTTTG, GGTGAGGGG, TACAAAATC, TCGCCCTTC, GTCGGCACC, CGAACCTCC, GCCAAGGTC, TAAGGCACT, TCCTGCACG, CGGTTCAAA, CTGAACTGT, GTCGCAGGT, ATTTTGTAG, AGCCCGCTC, ATTTGTAGG, GATGCGGCG, GGGGTCGGC, CTGGGGTAC, ACGGATGGC, CGAGCCGGT, CGGGAGGAT, ACGCTCTCT, CTGGCGGCG, TAAATAATC, TTTGTAGGC, CGTAGCCGA, GTTGGTAGA, CTGGCGGCA, AGCGGTTGA, TCGTTAGCT, CGAACCGTA, GCCCGCTCA, TTTGTAGGT, GCATCCGAC, GGTCGTTAG, GGTTAACAA, CAAATCAAC, GTGCACTGA, AGGCAGTCG, CTGACGCGA, CAAAGCGCG, TCACCCACC, GTCGCATCC, TATCCGACC, GTCGCATCA, ACGCATAGC, GTCATCCTG, ACGTCCGTA, ATATTAATA, CTTTCTTTT, GTGCCGCAT, AACCCCCAC, ATAAGACGC, TAGGGCAGA, CAGGTCGAT, GGATACGGG, GGCCGGATA, AGACGCGTT, CCGCTTTCT, GAGTCTCGT, TTACCGCTT, AGAACAGGT, GGCTGCCGG, TTGCTTATC, AGGTGAAAC, AGCTGGGAG, TCGTCGGTT, AGGCTAATG, ATCGCATCC, CGTCGCATC, AAAGCGGTT, CATCTGCGC, CGCTTCACC, CTTCTCATC, CGGGTCGTT, GCAGCCACA, TGCCCCTCC, ACTAAAGCC, ATCCCGTCA, ACAGGTCGA, TGGCGCGTC, GGCAGAATA, ATCGGGAAA, GTTTGGCAA, GCTGCAGCT, TCCGGCCCC, TATCATGCC, CCTTACAAG, CTGATGCGA, GGCGGATGC, ATTCGAACC, CCGCTGACG, AGGCGGTTA, TGGTGGTGG, TACAAGGAG, AAACCCGCC, TTTGGCAAC, AGTTGGCGC, CCGAGCCGG, TCCCCGCTG, GGGGTGGAG, CTGCGCGCT, GTCCGTAAG, GAAATGATG, CGCGTCTTA, CTCATCCTT, CTGATGCGC, AAATCCGGC, GGAGAGCAC, CTACGGATG, TCATAACCC, CCCTACATG, GACCCACCA, TTGACTCGC, ACCTCCCTT, CGCTCCAAA, ATAAGATGC, CGCGAGCGC, CACGCCGCA, CGACCCACC, TAATGCGGA, CGACAACCG, AACAGGTCG, ATGCGGCGT, ACGCTGGCG, TTCTTTAAA, CCGGGAGGA, GTTGCCGTT, CCGCTTGGC, ATGCGGCGC, ACTCAGCGC, CGCGACTTA, TCCCTTACA, CCGACCGCT, GCGGGGAAC, ATGCGCTTT, GGCTGGGGT, ACCTTGCCA, CTTACAAGG, CAGCAACAG, CTGGCGGAT, TTCTCATCC, CGTCTTATC, GCGTGAACG, CCCACGTCC, GGTGAAACT, GTTACGCCG, GATTTAGCG, GGGAACTCT, TCACGACGT, ATGCCTACA, GCCGCTATT, TCAAATCCG, ACTGTAGGC, CCGACAACC, GCCCGTACT, GTGCTCCAC, GACCTACGG, ATCGGCATC, AGGATTACT, ACGACTGCC, TCGCAGGTT, ACTGTAGGT, TACTAAAGC, TTCACGACG, GCGCTGGCG, GGTCGTCGG, CGAAGCCGC, GGGAACTCG, TGGCTGGGG, CAAAATCGC, TGGCGGTGA, GCCGGATAA, GGGCAGAAT, CTTTCTGCC, GAAAGCGGC, GCGTCGCAT, GCGCTGGAA, GCTGAGCTA, TCAATATTG, CTGACCGAT, GCTACTAAA, GGGCTTCTC, ATGAAATGA, CTTAACGCG, TGGGGGAAG, CGCGCAAGC, GTGATCGTG, CTGATAAGC, GGTCGTTGC, CTGATAAGA, CGCTTTGTT, AGCGTAGCG, CCGACCTAC, TATTGCCCG, TTAAATGAT, AGCTCCGGC, AGCCCGTAC, TGCGTATCG, TTTTACGTA, TTATCAGGC, CGTAGCGCA, GGTGTGTGC, GCAACGCTC, GGAGTTAAA, CCGACCTGT, GACAGCGCA, GAAGCCGCT, GCCGGATGC, GACTTTTAA, TTTCGTACG, GCGCGCTTC, TTCCCGCTC, CGCCAGACA, ACGCTGTCG, AACACCTGA, GTCGAAGCT, ATCAGCACC, GTCGGATAA, GTCGAAGCC, GCGGGCAGC, GGAGTTAAG, TTAATCAAT, CTAATGCGG, GGCATCTGC, CCGGCAATC, AGATGGTGC, TACCGCTTG, GGTAGCTCG, CGAAGCGGG, TCGAGTCTC, ATCCTGCAC, AAGGAGGGG, CCACCTCTT, CTGGCGCAG, AAGCGCGCA, TGGTCGCAG, GCATCCGGC, GCGTAAACG, AGCCGGTTG, CGCGCAAAG, TCGGTTCAA, TCATCACCC, GCATCCGGG, CGCTCACTG, CGACCTGTA, AGGTTCGAA, GCCTGGTAG, AAAAAAAGC, AATAGCTCA, GAGTTTGGC, AAAAACCCG, CACAATGCC, CGACATCCA, TGCCTTACC, TATTGCGGC, ACTGGAGTT, AGTTGGTAG, TCGGTTTAT, CACTAACAC, AGGTCGTCG, CCGATGCCT, GGGTGCGGG, AGGTCGGGG, AGCTTCTCA, GAAAGAAGC, CCGATAAGC, CGAGCGCCT, CGCCGTCGA, TCAATTGGT, TTGAAAGTG, AGTTGCCGT, GAACCTCCG, CGAAGGTCG, CCAAAGCGC, AATGCCTGA, CAGAAGAAC, GTTGACTTT, TTCGATCCC, GGCGATACC, ATCCAGCGT, GGAATGCCG, CGCGTCTGC, AAAAAGCCC, GGTGCCTTA, AAAAAGCAG, CTACATGTG, CTCGCCCTG, ATCAGCAGC, ATAGCTCAG, GGATGCGCT, CGTACTTTC, CGACATCAA, AACAACCGG, TGGGTCAAA, AGGCCGGAT, AGCCGCTTT, CCGGATAAG, ACAGTCATT, GCGCACGAC, AAGGCGGTT, GGCACCGTT, CCTGGTAGC, ATACCGCTA, GCATCGGGA, GATAAGACG, ACCGCTTGG, TACGGAGGG, CGACATTAT, CCTGCGGCA, TTGCCGTTA, AGCTACGGA, ACCGTTGCC, AAAAAGCCG, TAACCCGAA, GACTTGAAC, AATCAATTG, GACCTTGCC, GCCTACGCC, TGCTTCTTC, AAGCTTCTC, GAGCTACGG, ACAAAATCG, ACGCTCTTT, GTGAAGTGC, CCTTATCCG, GGTTTTTAC, GGGGACTTG, CTGGCGCGT, CCTCCGACC, GCTCTTCTT, AACAGGCTA, AAGGCGTTT, CTGGCGCGG, GGATGCGGC, CGTCTACCA, GAAAGCCAG, GCGACGCTG, CGCGGGGTG, CGGTGTGTG, ACGCTTAAC, CCCTGCGGG, CGACCTTGC, CGCCCTTCG, GCGACGCTT, TGAAGTGCT, GGGAAGGAT, ACTTTCGTA, CTAACGCCC, AGAGCACCT, ACGGCTGCC, GAGGGGGGG, AAGGCGTTC, CGTTTATGC, ATACAGCGA, CGGGGCTTC, AGCGCATCA, GGTCGGATA, ACAAGGAGG, CCGAGTACT, GTGCGGGAA, AGAGCACGA, CCTGCGGGC, CGTTCACGC, CTTTTGAAA, TAACGCGTC, ATAAAATAT, TGCCTGCGG, TGTCCAACT, GTGATGGTG, GCCTACGGA, GTCGGATGC, GCGCGGGGA, CGTTCACGG, GCCTACGGG, TCGGTTCGT, TGGCTGTCG, AGCGCACCA, GGGTTTTTA, AGGTCGGAT, TTTCTGCCC, GGTGCGGGA, ACCGATGCC, CCTACACCG, CTCCAAAAG, ATCTTCTTC, ATTATTGCG, TCAAAAGTT, CAGTCGGCA, CTGTAGGCC, CAGCGCAAT, CTCATAACC, CCCGCTGGC, AGGCATCTG, GCCAGTTGT, GCTTAACGC, CAACCGATG, AGCTCGTCG, CCCGGTTTA, GCACGACTG, GACCGATAA, GGTGGGGGA, CATAACCCG, GTAAACGCC, GCGAGGGGG, TAGCTCGTC, CGACGCTGT, ATGGTGGTG, CCGGTGTGT, ATAACCCGA, ATGAAATTT, CGACGCTGG, CCAGCAGGC, AGATGGGAG, ACTGCGTTC, TTCAAATCC, CCAGCAGCA, GCCCCTCCA, CGCATCCGA, CTACGCCAG, CCCGCTCAC, TGCGGGCAG, TGATTTAGC, GGCCTACGC, AGAAAAAGC, CTGTCGCCA, GGCCTACGA, CTCATCCCC, GGCCTACGG, GAACCGTAG, CGCATCCGG, TTTGTGCTG, ACGCCGCAT, GGATTCGAA, CCGGACGGT, GCCTGATGC, GTGTGTGCA, TCGAACCTT, GCCGCCGCC, TCGTACGAG, TGTCGCGTC, AAGGTCGTC, CCTACATGT, CGGCAATCA, TGGGCAGAA, CGTTGCCTG, CTCTATCCA, GGTGGGTCA, GTCTGCTTC, TCGAACCTC, GTTAAATAA, TTTTAATCA, GTCGCGAGT, AGTCATCCT, CTCCACCCC, TCGGATGCG, GCGCTGCGC, GCTAGCGCG, TGGTGCGAG, TGGGTATAG, TCTCCGTTC, CCCGCTCCA, GGCACTATG, TGGTAGAGC, AGCGTGATT, GGCGCGAGC, AGAGCAGTT, GCCTGATAA, CTAGCGCGT, CTGCGTTCA, GCCTTATCC, GAATCTGTA, AACCGATGC, TGCTTATCC, CAGTTGGTA, AAGAACAGG, ACTCGCTTC, CGGCAACGC, AAGAACAGC, TCGAAGCCG, AGTCATTCA, CAGCGCACC, GGTTTATCC, GTCTACCAA, AGGCATTTG, TCGTTGCCT, CTGGCTGTC, CGCTATTGC, TTATTGCGG, CCGCATCCG, GACTGCCGG, TCTTTAAAT, TGCGACGCT, TCCGACCTA, AATCCTGCA, CCAGAAGAA, GGACAGTCA, AAGTGATGG, TAGCGCGTC, CCGGCCCCC, GCTCTCTCG, CCGGTGCCT, GACGCATTA, GTGAAACTG, GCTCGCCCT, CAGGTTCGA, AAAACCCGC, ATCCGACCT, CGTGAACGC, TTACAAGGA, GACGCTTAA, TTTCCCGCT, GGCCTACAA, CAGCCACAA, GCCAAAGCG, CCAAGGTCG, GGCCTACAC, GGGAGGATT, GCCGCAACA, GGCGCTGGC, GGCGCTGGA, CGCTGCGCG, CTGCCAGCG, GAGGGGGTC, GGTAAAGTG, GACGCTGGC, TGGCACTAT, TCGGGTCGT, CCCGGTCGG, ATCGTTTGA, GAACCCCCA, TTATCCCCG, ATCCGACAT, GTGCTTCTT, GTGATTTTG, ATGCATCGG, AGGTTTTCC, GAACGCCTT, AAAAAAAAG, GGAGCAGCC, CTGCTGAAA, GGGTGATTA, GTCGATCCG, AATATCAGC, TTGCCGCCG, CCCCGCAAC, CGCTTTCTT, ATCCGACAA, TTAGCTCAG, CGCAACCAA, GAGTCATCC, CGACGCTTG, GGCGCTGCT, TACTCTATC, ATCCAGCTG, TCTTTCTGC, ATCTGTAGG, TGTCGCCAG, CACTGGAGT, GGGACTTGA, CTCAGCTGG, ATTTAGCGT, CACGACCTT, ACATCTAAC, TGATACCGC, GCATAGCGT, CGACGCTTA, ACTGACCGA, AAGCAGAAG, ATGGCGGTG, TGCGGCGTA, CGGATACGG, GAATTTGTA, TGCGGCGTG, GCGTCTTAT, CCGTCATCA, TGCGCCGCT, CGGCGTGAA, TTATCAAAA, TCCGCCCTA, TTATCCGGC, CCCGTACTT, CACCTCCCT, TGCACTGAA, GCGCAAAGC, TGCCTGATG, GCAACAGGC, CTCTCTCGC, GCAATAGCC, TCGCGAGTT, CGCTCTCTC, CTGTCGCGT, CTTTGCTTA, GCTGCGCGC, AGACAGCGC, AGCTAGCGC, AGCCGAGTA, GCACTGAAC, CGGGGAACA, AGCCGCAAC, GTTGGCGCA, GACGCGACT, CGGGGAACT, TTAAATAAT, CCCGGTGTG, AAAGCAGAA, GAAAAAAAA, AATCAATGC, GCCGACCAG, TCTCACTCC, AGCGCTGCG, CAGGTGAAA, CGGTGAGGG, AACTGGCTG, AAAGTTGCC, TCCGCGCAA, TTTTTACGT, CGCCTTATC, TGAATCAGC, GTCAAAAGT, CAGAATATT, TCTGTAGGC, AATCGCAGC, GCACGACCT, ATTACTCAG, CGCATTACG, CGTGATCGT, CCGCTCGGT, GCACGACCC, TAAACGCCT, AAAAGCGGC, GGTCGCGAG, TAATCAATT, CAGGCAGTC, CATTACGCG, CCCTTCGGG, TCCGACCGC, AATATTGGT, GGTGATGTT, TTGACTTTT, CCGCCGAAG, GTCGGTTCA, ACTATGGCA, ATGATGAAA, CTCAGCGCT, CACCCCGTA, TTCAATATT, ATGCGCCGC, CATCAGGCG, GCCGCCGTC, CATCAGGCA, TTGCGGCAC, GCAAAGCCG, ACATCAACG, GGGGCAAAA, AAAATCGCA, GCTTATCCG, TGTGCAATA, GCTGGGGTA, CGCACAATG, ATATGGCGG, GTGCCGAAC, TCAGCGCCT, CAGCGTCGC, AAAGAAGCT, GACGCTGTC, TGATGGTGG, CACGACGTT, GCCAGCAGG, CATCCGGGA, ACCAATTCC, AAGTTGAAG, GTGCCTTAC, GCCAGCAGC, CCAGCTGAG, AACCAGCAG, TGTAGGCCT, TCCCCCCGG, GCCGAGGAT, AGAATCTGT, AGAAAGCGG, ACACCTGAA, ACAGGCTAA, CGCTGAAAG, GTTGACGGC, CAGTTGGCG, TGAAAGTGA, TCGTAGCCG, CCCCCACGT, CGGGTTTTT, TGATAAAAA, CTACGGGGT, CCACCCCGT, GCTACCGCT, CGCTTCGCT, GTACGAGCT, CCGGTCGGG, GTGGAGCAG, TGGTGGGGG, GATTAGCTC, AAATATGGC, GTTGCCTGA, GGCTGGCGT, TGTAGGTCG, GTTGCCTGC, AAGGTCGGG, CGCTTCGCC, GAAGCTAGC, TACCAATTC, GTAGGTCGG, TGCACGACC, TCGAAGCTT, CGCAGGTTC, GGCTTCTCA, ACCCCCACG, CATCACCCA, AAACGCCTT, TCAGGCGTT, GGCGGTTCG, TCGTCGGGC, GTGGTGGGG, CACTATGGC, GTTTGTAGG, GTCGCCAGT, TCATTCATC, ATACCCCAA, CATCCGGCA, CCGCTGGCG, AAGCGTCGC, CTGCGCACG, GCTCACTGC, ACTAACACC, GTGCATCCG, TGGCGATAC, TGATTAGCT, CCTGGCGCT, TACGGGGTG, GCGCTGCTC, AGAGATGGT, GCAACCAAT, GGCGGTTAC, GACAACCGA, GCAGAGAAG, GGCGTAAAC, GCACTTGTG, GCAGCTCCG, TTTAATCAA, CGATAAGCC, TTACTCAGC, CACGACCCA, ACGCGGGGT, AGCTGAGCT, GCCGAGTAC, CAGGCATTT, TCGCCAGTT, TCGGCATCG, GGGGGGGAT, GAATGCCGG, GCCCTTCGG, GCTTCTCAT, CGGACGGTG, CGGTTTATC, GCAGTTGGC, CGCGAGTTC, CGACGCGGC, GGGGGAAGG, GGAGGATTC, CAGTTGTCG, TCCAGCTGA, GGGGGGGAC, CGCCGCTGA, CTACTAAAG, AACCCGCCG, GATGCGACG, GCGGTTTAT, CCGGCCTAC, CAGCAGCCG, GCTGCCGGA, GCGGCGCGA, AGTTAAATA, TGCGGCGCG, GTTGCCGGA, CGCCGAAGC, AAACTGGCA, AGCAGTTGA, TGCCGAACC, CATCCCCCC, CACAGCGTC, CTGAAGCTA, GAAGTGCTC, CACCAGCGC, TAAGATGCG, AATGGCGCT, AAGCTGGAA, ACGGTTATG, GCTCGGTTC, TTGCCGGAT, GCGCCGCTG, GCGGCGTGA, TTAAATATG, TATCCCCGC, TTGCCAAGG, TATCCGGCC, TCCGGCCTA, CAGCAGCAA, GGGGGGGGA, TAACACCTG, CCGCAACCA, CAGACAGCG, TTCGGGTCG, AAAAGCCCG, TATGCCGCA, AGCCTGATT, TAAATATGG, GCTGACGCC, GCTGACGCG, CAAGCGTCG, GGGAATTTG, GTCTCGTTT, TCAGGCCTA, AACTGTAGG, TTGGTAGAG, CGTGCTTCT, AGGGTGCGG, CATCCAACG, CCGCTCCAA, GCAATCAAT, CCCGAAGGT, CTACAAAAT, CAGCCTGGT, AGATGCGCA, GTCGTTGCC, GGGTGGAGC, CCTGATTTA, CACGACTGC, CTATCCAGC, GGCAGTTGG, TGAACGCCT, AGAAGAACA, ACGACGTTC, CAATAGCCT, TTCGAGTCT, GCGGACTGA, AGGTCGATC, GCGGTTCGA, GGTTCGTAG, TGAAACTGA, TATGGCGGT, CTTCCCCGC, ATCAGGCGT, TGATGAAGC, GGTGATTAG, ATCACCCAC, CCTTCCCCG, GTCGTCGGT, CGCTGGCGC, CGCAAGCGT, AAGAGATGG, AAATAATCT, GTAGCTCGT, TCATCCTTC, TACGCGTCG, TCGATCCGC, ATCATGCCT, GGGTCGTTA, AATTGGTCG, CGCGCTTCG, CTCGTTTCC, GGGTCGTTG, ACGGTGCTA, TTTATGCCG, TGCGCGCTT, ACGGAGGGT, TTGGCGCAC, AACCGGTTG, GAGGATTCG, TGGTGCATC, TGACCGATA, CGTTCTTTA, CTTTAAATA, CGCTGGTGG, AGGCGTTTA, AACCGTAGG, TAGGCCGGA, CCCCGTAGG, TCGCTTCGC, CAAGGAGGG, GGCAGTCGG, AAAAATTGA, TGTGCCGCA, GGTAGAGCA, CGCTGTAAT, ATCAACGCC, GGTGCGAGG, CAACGCCTG, CCGCAACAA, CAGCAGGCC, TTTGGGTAT, AACAGCACG, TCCGGCAGT, TCAGCGCTG, GACATCAAC, TAGGCCTGA, ACCGCTACT, CTACCAATT, TTCCGCCAC, GCCTACAAC, CCTGATGCG, ATATGGATT, AGGAGGGGG, TCCAACTGG, GCCTACAAA, GTCATCACC, TTCGCCCTT, TATCCGCCC, AGGCAACGG, CTCCGACCG, TGTGTGCAA, AATTTGTAG, GCGTTCACG, AGGCCTGAT, CAACGGTGG, ACCGATAAG, CTACACCGC, CTTCGGGTC, ACAGCAACA, CATTCTGAT, AACAGCAAC, TCGATCCCG, GATAAGCCG, TGGCGCACA, GGTCGGGGC, GTCCAACTG, CCGCCACCT, CGTTAGCGT, ACCCGCCGA, TATCAGGCC, GAGCACGAC, CACTGAACT, CGGGGTCGC, CGGCAGTTG, GCCTACACC, GGAATAGCT, TAAGAGATG, ACCCGAAGG, GCGGCGTAA, GTCGTGGAC, CTACGGTTA, ATGCCTGAT, CCACCAGCA, CCCCACGTC, GTCGGGGCT, GGTCGGGGT, GCGGTGAGG, AGCACCTCC, GTTGCCAGG, CCCACCAAT, CAACTGGCT, GCGACTTAT, GCAGAAAAA, GCGCGAGCG, AGTGCTCCA, CGCAATAGC, TGCTCCACC, TGCCAAGGT, GCATCAGGC, CAGCTGAGC, AGCTCAGCT, TTATGCCGC, GCACCTCCC, AACGGCTGT, TGACGCGAC, GGTTACGCC, GCTCATAAC, ACCGTGCTG, TTGTGCCGC, TAAGCCGCT, AGTTGTCGA, CGCCAGTTG, CCTTCGGGT, GCAGCCTGG, TTTCTTTTG, ACAGCGCAA, GCTGGCTGG, TCCTTCCCC, CAGGCATCT, TGATGAAAT, GATGGTGGT, GCCAGCCAC, CGCTTGGCG, CAATCAATG, GCCGCTTTC, TTTACGTAA, CCGTAGGTC, GTTTTTACG, CGGTGCCTT, GGTTGCCTG, CAAATCCGG, TGTCGGATG, CATCGGGAA, ACGACGCGG, TGCCGCATC, CCCCCGGTG, GAGCTCTTC, GCAGCCCGC, CGGCCTACA, GGCAGGAAG, CTGCCCCTC, ACAATGCCT, TCCGGCAAT, CTCGGTTCG, CGGCCTACG, GCGGCGGCG, CGGTTCGAT, GATACGGGC, TAAGGCGTT, CTCTTCTTT, TCACGGTCT, GTTCGAGTC, CGCTCGGCA, AGTACTCTA, ACGACCTTG, CGCTTAACG, TATCAGCAG, GACAGTCAT, GGGCAGCCC, CGTCCGTAA, CTGATTTAG, CTGGAACAG, ATTGACTCG, TGATGCGAC, CCAGACAGC, AGACGCACA, GAATCCTGC, GACTCGCTT, TCGCATCAG, AGTGATGGT, GCTTCGCTC, GAAGCTTCT, CGCAAGCTG, ATCTTTCTG, GCGGCAACG, TAAATATTG, CGTCGGTTC, ACTTGTGCC, GCTGTGAAG, AGCTGCAGC, TGAGGGGGG, GATGGTGCA, CAGAAAAAG, TCCACCCCG, ATCTGCGCA, GATAAGGCA, CCCTTACAA, TTTATCCCC, GATAAGGCG, GGTCGGCGG, CGAAGTTGA, TCATCCTGC, TCATCCTGA, TTCTTTTGG, CCGCTGTGA, CGGGCTCAT, GCGGGAATT, TGATGCGCC, CTAACACCT, CGGGAATTT, CGCTACGGC, CTGGCAGTT, CAGTTCCAG, TCGCGTCTT, GCGGGAATA, GCGGGGTGG, CCGACATCC, GCTGGAACA, CAGCACGCC, TGACTTTTA, CGCTACTAA, CCGACATCA, CCGTACTTT, CTGGCAGTC, AGCGCGCAA, GGATAAGGC, CTGTAGGTC, GACGCATAG, AGGATTCGA, GCCTGATTT, GCTGGCGCG, GCTCAGTTG, GATTACTCA, CCGGATGCG, CAGGAGTTA, CGGTTGCGC, AAGAAAGCG, CCTGCACGA, TCATCTTTC, GGTCAAAAG, ATTGCGGCA, TCATCCCCC, CTGAAAGAA, GCGAGCGCC, CGGGCAGCC, CGACTGCCG, GAAGTTGAA, GCTAATGCG, CGTTGCTGC, TCTGCGCAC, AGTTGACTT, TCGAACCCC, CTGGCTGGC, GATGCATCG, TTATCCGCC, GACGGTGCT, AATCTGGCA, ATAAGCGTA, TACGCCGCA, ACTTATCAG, CCAGCTCTT, TCGCATCCG, TTGGGTATA, ATAGCGTCG, CCTTACCGC, GGCTCATAA, ACGAGCTCT, AGGCGTTCA, GGGGATTGA, ATTGCGGAT, CCGCTGTTC, TGAACCCCC, CAAAAGTTG, GCCGTCGAA, GGATAAGAT, CGCTCGCCC, CGGTCGGGG, CAACGCTCT, TGTTCATAT, CTGCAGCTG, GGCGTGAAC, GCAGTCGGC, TCATCCGGC, CCAGTTCCA, TTCACGGTC, CATCTTTCT, GAGAGCACC, TCTATCCAG, TCCCGCTCC, CGAGTACTC, ACAGCGTCG, GTGGGGGAA, ATTAGCTCA, ATATTTTTT, GGATAAGAC, CATAGCGTC, GGAGTTTGG, CGACCGCTC, CGCCCTACA, CAATGCCTG, GGCACTTGT, TTCTGCCCC, ACGAAAAAA, CCCACCACT, TTTATCGCC, GCGCTACGG, GCTGGCGAT, CATTATTGC, TGCGAGGGG, GACGCACAG, AATCTGTAG, GCTCAGCTG, GTCATTCAT, GGCGTTTAT, CGTTGCCGG, TCACGCCGC, TACTCAGCG, GAACTGGAA, GCGTTAGCG, ACAACCGGT, GAAGGATTA, AGGGGGTCG, TGCATCGGG, ATGGTGCAT, AGCTGGAAC, ACTGGCTGT, ATAAGCCGC, CGCCACCTT, TCTTCTTTA, CTTTCGTAC, CTACCGCTA, GGCGTTCAC, TTTAGCGTG, TTTGAAAGT, AGCTCAGTT, CACTGCGTT, TGCGCCTGT, TCTCGTTTC, CGTGGACAG, AACGCTCTC, TCTTTTGGG, GCACTATGG, CCAATTCCG, AATGATGAA, CGCACAGCG, ACGGTCTGT, AGGGGGGGG, AAGGATTAC, GGGGAACTC, CGGCGGTTC, GAAGGTCGT, CGGTTCGTA, GTTCGATCC, CTCGCTTCG, CGTTTCCCG, AGCGGCTGC, GCATTACGC, GCCCTACAT, GACATTATT, GGGATTGAC, TTTACCGCT, AGGGGGGGA, CCCGTCATC, CGTCGGGCT, ACAAACGCA, CTCACTGCG, TCTAACGCC, TTAACGCGT, GAACAGCAA, GTGTGCAAT, GCGCAATAG, GCCTTACCG, GAGCGCCTT, GAGTACTCT, GATAAGCGT, ATAAGGCGT, AAAGTGATG, CGACCTACG, GATTGCCGA, GCTGATTGC, GGAAGGATT, ATAAGGCGG, TGCAGCTGA, GGTCTGTCC, TCTCATCCT, GAAGAACAG, CTTTTGGGT, CGGGAATAG, GCAGGAAGG, TGTGCCGAA, CCAGTTGTC, TCTCATCCC, GGTGCACTG, GCAGCCGCA, ATAATCTAC, GCTATTGCC, GAACTGTAG, ATCAGGCCT, CGCATAGCG, CAGAAGCAG, ACGCATTAC, GGCACTGGA, TGTCGTGGA, CGCTCGGTT, ACGACCCAC, AAAATATTT, CGGCACTGG, ATCTATTCA, CTTGAACCC, AGCGTCGCA, TTGGTGCGA, TTCACGCCG, GCGTGATTT, GCACAATGC, ACGCGTCTT, TCAATGCCT, TTGAACCCC, CTTTTAATC, ATAAGGCAC, CGGTTGCCT, AAAAATGAT, AAATGATGA, TCGGATAAG, AATGCCAGC, CCGACATTA, TCTTATCAG, ATCCTTCCC, GACCTGTAG, CACCGCTGT, TCTTATCAT, CGCCAGCAG, GCGCAAGCG, ATCAGGCAT, TATGTTCCG, CCAACTGGC, GAGGGTGCG, ACTGCCGGA, TAAGGCGGT, TGATTTTGT, ATCAGGCAG, TGCCGGATG, GTCGGCGGT, ATCAGGCAA, CTTGCCAAG, AGACGCATA, CTCAGTTGG, AACTGACCG, GTCTTATCA, AGACGCATT, CGGGGTGGA]",
//                   alg.betterClumpFinding(strBuilder.toString(), 9 ,500, 3).toString());

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void skew() {
        assertEquals("[0, -1, -1, -1, 0, 1, 2, 1, 1, 1, 0, 1, 2, 1, 0, 0, 0, 0, -1, 0, -1, -2]", alg.skew("CATGGGCATCGGCCATACGCC").toString());
        assertEquals("[0, 1, 1, 2, 1, 0, 0, -1, -2, -1, -2, -1, -1, -1, -1]", alg.skew("GAGCCACCGCGATA").toString());
        assertEquals("[0, 1, 0, 0, 0, 0, -1, -1, -2, -2, -2, -3, -4, -5, -5, -4, -4, -4, -3, -2, -2, -2, -3, -3, -2]", alg.skew("GCATACACTTCCCAGTAGGTACTG").toString());
    }

    @Test
    public void minimumSkew() {
        assertEquals("[11, 24]", alg.minimumSkew(alg.skew("TAAAGACTGCCGAGAGGCCAACACGAGTGCTAGAACGAGGGGCGTAAACGCGGGTCCGAT")).toString());

        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/dataset_7_6.txt"));
            StringBuilder strBuilder = new StringBuilder();
            String str = "";

            while ((str = br.readLine()) != null) {
                strBuilder.append(str);
            }

            assertEquals("[9827, 9828, 9843, 9844, 9845, 9846, 10251, 10252, 10253, 10262, 10263, 10264, 10265, 10266]", alg.minimumSkew(alg.skew(strBuilder.toString())).toString());

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void hammingDistance() {
        assertEquals(3, alg.HammingDistance("GGGCCGTTGGT", "GGACCGTTGAC"));
        assertEquals(36, alg.HammingDistance("CTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACGT", "CTACCCCGCTGCTCAATGACCGGGACTAAAGAGGCGAAGATTATGGTGTG"));

        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/dataset_9_3.txt"));
            StringBuilder strBuilder = new StringBuilder();
            String str1 = br.readLine();
            String str2 = br.readLine();

            assertEquals(790, alg.HammingDistance(str1, str2));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void approximatePatternMatching() {
        assertEquals("[6, 7, 26, 27]", alg.ApproximatePatternMatching("CGCCCGAATCCAGAACGCATTCCCATATTTCGGGACCACTGGCCTCCACGGTACGGACGTCAATCAAAT",
                "ATTCTGGA", 3).toString());

        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/dataset_9_4.txt"));
            String str1 = br.readLine();
            String str2 = br.readLine();
            String str3 = br.readLine();

            assertEquals("[403, 440, 921, 1130, 1697, 2179, 2231, 2705, 2877, 3093, 3747, 4330, 4366, 4528, 4561, 5548, 5927, 6225, 6721, 7640, 8149, 8185, 8665, 8781, 9048, 10249, 10482, 10844, 11979, 12018, 12249, 12439, 12469, 12637, 14990, 15110, 15712, 16004, 16087, 16493, 16795, 18031, 18196, 18542]", alg.ApproximatePatternMatching(str2,
                    str1, Integer.parseInt(str3)).toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void approximatePatternCount() {
        assertEquals(4, alg.ApproximatePatternCount("TTTAGAGCCTTCAGAGG",
                "GAGG", 2));

        assertEquals(11, alg.ApproximatePatternCount("AACAAGCTGATAAACATTTAAAGAG",
                "AAAAA", 2));

        assertEquals(8, alg.ApproximatePatternCount("CGTGACAGTGTATGGGCATCTTT",
                "TGT", 1));
        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/dataset_9_6.txt"));
            String str1 = br.readLine();
            String str2 = br.readLine();
            String str3 = br.readLine();

            assertEquals(23, alg.ApproximatePatternCount(str2,
                    str1, Integer.parseInt(str3)));

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void neighbors() {
        assertEquals("[AA, AC, AT, AG, GA, TA, CA]", alg.Neighbors("AA", 1).toString());
        assertEquals("[CTAGTCAATG, CCAGTCAGTG, CAAGTCAATG, CCAGTCTATG, CCAGTCACTG, CCAGTCAATG, CCAGTCCATG, CCAGTGAATG, CCAGTCAATC, CCAGTCAATA, CCTGTCAATG, CCAGTCGATG, CGAGTCAATG, CCAGTCATTG, CCCGTCAATG, CCGGTCAATG, CCAGACAATG, CCAGTCAATT, CCAGTTAATG, CCAATCAATG, CCATTCAATG, CCAGGCAATG, GCAGTCAATG, CCACTCAATG, ACAGTCAATG, CCAGCCAATG, CCAGTAAATG, CCAGTCAAAG, CCAGTCAACG, TCAGTCAATG, CCAGTCAAGG]", alg.Neighbors("CCAGTCAATG", 1).toString());

        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/dataset_3014_4.txt"));
            String str1 = br.readLine();
            String str2 = br.readLine();

            assertEquals("[CGAGCAACCAT, CGCACAAGGAT, GGACCAAGGAT, CGAACGAGGAT, GGAGTAAGGAT, CGAGAAAGGCT, CGAACAAGAAT, CTAGCAAGGGT, GGTGCAAGGAT, CCAGCACGGAT, CGATCAACGAT, CGTGCTAGGAT, CGAGCACGGGT, TGAGCAAGGAT, CGAGCCAAGAT, AGAGCTAGGAT, CGAGCTAGGCT, CGAGTTAGGAT, TGAGCAAGGAG, GGAGCAAGGCT, AGAGAAAGGAT, CGAGCACGTAT, CAAGCAGGGAT, CGAGCATAGAT, TGAGCAAGGAC, TGAGCAAGGAA, CGAGGAAGGTT, CGCGCAAAGAT, CTGGCAAGGAT, CGAGCAACGGT, CGAGCAAAAAT, CAAGCAAGTAT, CTATCAAGGAT, CGGGAAAGGAT, CGCGCCAGGAT, CGATCAAGGTT, CGAGCAACTAT, CGAGCACTGAT, CTAGCAAGCAT, TGACCAAGGAT, CGAGCGAGGTT, CGAGCCTGGAT, CAAGCAAGGGT, CGAGCAAGCTT, CGAACAAAGAT, AAAGCAAGGAT, CGAGGCAGGAT, CGAGCACGCAT, CGAACCAGGAT, TGTGCAAGGAT, CGAGCTAGGAT, TGAGCAAGGCT, CTAGCAAGTAT, CAGGCAAGGAT, CGACCTAGGAT, CGAGCAAGTTT, GGGGCAAGGAT, CGTGCAAGGAC, CGTGCAAGGAA, CGTGCAAGGAG, CGAGGAACGAT, CGAGCTAGGAC, CGAACATGGAT, CGAAGAAGGAT, CGAGCTAGGAG, CGAGCAATGTT, CAAGTAAGGAT, CGAGCCAGAAT, CGAGCTAGGAA, CTAGCAATGAT, CGTGCAAGGAT, TGAGCTAGGAT, CGCGCATGGAT, CGAGCGACGAT, CGAGCATGAAT, CGAGTAAGGAT, CGAGAAAGGGT, CGAGAAGGGAT, CGCGCAACGAT, CAACCAAGGAT, CGAGTAAGGAG, CCAGCTAGGAT, CGAACAAGCAT, CGACCAAGGAG, CGAGGATGGAT, CGAGTAAGGAA, CGAGTAAGGAC, CTAGCAAGGCT, CGAGAAAGTAT, CGAGAAATGAT, CGACCAAGGAT, CAAGCAAGCAT, CGTGTAAGGAT, CGCGCGAGGAT, ATAGCAAGGAT, CTAGTAAGGAT, CGAACAATGAT, CGAGCTAGGGT, CGAGCCAGGTT, GCAGCAAGGAT, CTTGCAAGGAT, CGAGGAAAGAT, CCAGCAACGAT, CGACCAAGGAA, CGACCAAGGAC, CGATCACGGAT, CAAGCAATGAT, CGTGCAAGGCT, CGAGCAACGCT, CGAGTAAGGCT, CGAGAAAGCAT, AGTGCAAGGAT, CGAACAGGGAT, CGAGCAAACAT, CGCGCAAGGTT, AGAGCAAGGAT, GGAGCTAGGAT, CGGGCACGGAT, GGAGCAAGGAA, GGAGCAAGGAC, CGAGCACGAAT, GGAGCAAGGAG, TGAGTAAGGAT, TGAGCAAGGGT, CGAGGGAGGAT, GGAGCAAGGAT, CGGCCAAGGAT, AGAGCAAGGAA, CGACAAAGGAT, CCAGCAAGGTT, AGAGCAAGGAG, AGAGCAAGGAC, CGTGCAACGAT, TGAGCACGGAT, CGAGCAAAGGT, CACGCAAGGAT, AGAGCAAGGCT, CGAGCAACGAG, CGGGTAAGGAT, CGAACAACGAT, CGAGCAAATAT, CCAGCAAGGAA, CCAGCAAGGAC, CAAGCAAGAAT, CGAGCAGGGAA, CGAGCCGGGAT, CGAGCAACGAT, CAAGCGAGGAT, CGAGCAGGGAC, CGAGCCATGAT, CGAGCAGGGAG, CTAGCATGGAT, CCAGCAAGGAG, CGAGCCAGTAT, CGAGCAGGGAT, CGAGCAACGAA, CGAGTAAGGTT, CTCGCAAGGAT, CGAGCAACGAC, CGATGAAGGAT, CGGGCAAGGTT, CCAACAAGGAT, CCAGCAAGGAT, CGATCCAGGAT, CGATCATGGAT, CGAGCACAGAT, CGAGCCAGGGT, GTAGCAAGGAT, CGAGCAAGGTG, CTAGCAAGGAA, CGATCTAGGAT, CGAGAAAGAAT, CGAGCAAGGTC, CGACCAAGGCT, CTAGCAAGGAC, CGCGAAAGGAT, CGACCAGGGAT, CGAGCAAGGTA, CAAGCAAAGAT, CGAGCAATAAT, CGAGCAAGAGT, CCAGTAAGGAT, CTAGCAAGGAT, CCAGCATGGAT, CGAGCAAGGTT, GGAGAAAGGAT, CTAGCAAGGAG, CGAGCTAGTAT, CGAGCTATGAT, CGAGGAAGAAT, CGAGCGCGGAT, CGAGCTAGCAT, CGGGCAACGAT, CGAATAAGGAT, CGAGTAACGAT, GGCGCAAGGAT, CGAGCATCGAT, GAAGCAAGGAT, AGAGCAAGGGT, CGACCAAGCAT, AGAGCAGGGAT, CGAGCGTGGAT, CATGCAAGGAT, CGAGCTGGGAT, AGAGCAAGTAT, CCAGAAAGGAT, CCGGCAAGGAT, AGAGCAATGAT, CGAGCAAAGCT, CGTGCACGGAT, CAATCAAGGAT, CGATCAAGGCT, CTAGAAAGGAT, AGAGCCAGGAT, CTAACAAGGAT, CGAGCTAAGAT, CGAGGAGGGAT, CGATAAAGGAT, CGACCAATGAT, CGAGGAAGGGT, CGAGAAAAGAT, CGAGCACGGTT, CGAGCATGGTT, CGAGGAAGTAT, CGGGCAAAGAT, AGAGCAAGCAT, CGACCAAGGGT, CTAGCACGGAT, CAAGCAAGGTT, CGAGCAAAGAC, CGAGCAAGACT, CGTGAAAGGAT, CGAGCAAGCGT, AGACCAAGGAT, CGAGCAAAGAG, CGAGGAATGAT, CGAGCAATCAT, TGAACAAGGAT, CGACCAAGTAT, CGAACAAGGTT, CGAGCAAAGAT, CGATCAAGGAT, CGCGCACGGAT, TAAGCAAGGAT, CGAGCTAGAAT, TGAGAAAGGAT, CGGGCGAGGAT, CGAGTACGGAT, CGAGGAAGCAT, CGATCAAGGAG, GGAGCACGGAT, CGATCAAGGAA, CGAGCAGGGCT, CGATCAAGGAC, CGAGCAAAGAA, CGACGAAGGAT, CGAGCAATTAT, TGGGCAAGGAT, CGAGCACCGAT, TGAGCATGGAT, CGAGAGAGGAT, CGACCCAGGAT, CGAGCCAGCAT, CGTACAAGGAT, CGCCCAAGGAT, CAAGCAACGAT, CGAGTGAGGAT, CGACCAAGAAT, CGAGCATGGAT, CGTGCGAGGAT, CGAGCAAGAAT, CGAGCATGGAG, CGAGCAGTGAT, GGAACAAGGAT, CGACCGAGGAT, CGAGCAATGGT, CGAGCGAGGAT, CCAGCAATGAT, CGAGTAAGAAT, CGAGTATGGAT, CGAGCATGGAC, CGAGAAAGGTT, CGCGCAAGGAG, CGAGCATGGAA, TGAGCAAAGAT, CGTGGAAGGAT, CGCGCAAGGAT, CGTGCATGGAT, CGAGCAAGTGT, CGATCAAGGGT, CCAGCAAGCAT, CTAGCAACGAT, CGAGGAAGGCT, CGCGCAAGGAC, CGCGCAAGGAA, CGAGCAGGCAT, CGAGCGAGGAG, CGAGCAAGAAG, CGAGCGAGGAA, CGAGCAAGAAC, GGAGCAAGGTT, CGAGCAAGAAA, CGGTCAAGGAT, CGAGCGAGGAC, AGAGCAAGAAT, AGCGCAAGGAT, GGAGCCAGGAT, CGTGCAAAGAT, CGAGCAAGCCT, GGAGCAAAGAT, AGAGCATGGAT, CGAGAAACGAT, CGAGCGAGGCT, AGAGGAAGGAT, CGGGGAAGGAT, CGAGTCAGGAT, CCAGCAAGGGT, CGGGCAAGAAT, CGAAAAAGGAT, CGAGCAGGGGT, CCAGCAAGTAT, CGATCAGGGAT, CCATCAAGGAT, CGAGCAGGTAT, CGCGTAAGGAT, CGAGCAAGCAT, CGAGCAATGCT, GGAGCAACGAT, GGAGCATGGAT, ACAGCAAGGAT, AGAGCAAAGAT, GGAGCGAGGAT, TGAGCAAGGTT, CCAGGAAGGAT, CAAACAAGGAT, TGCGCAAGGAT, CGAGCAAGTCT, CCCGCAAGGAT, CGAGACAGGAT, CGGGCAGGGAT, CGGGCAAGGGT, AGATCAAGGAT, CGAGCAGGAAT, CCAGCGAGGAT, CGAGCCAGGCT, CGAGCAAGCAG, CGAGTAAAGAT, CGGGCAAGTAT, CGATTAAGGAT, CGAGCAAGCAC, CGAGCAAGCAA, CGAGCCAGGAC, CGAGCAAGTAG, CGAGCCAGGAG, CGAGCAAGTAC, CGAGCAATGAG, AGAGCGAGGAT, CGAGCAAGGGT, CGAGCAAGTAA, CGAGCGATGAT, CGGGCAATGAT, CGAGCAATGAT, CGAGCGAGGGT, CGAGGTAGGAT, CGTGCAAGGTT, CGAGCCAGGAA, CGAGCAACGTT, CGTGCCAGGAT, CGACCAAAGAT, CGAGAACGGAT, CGAGCATTGAT, CGATCAAGTAT, CGAGCAAGTAT, CGAGCAATGAA, CGCGCTAGGAT, CGAGCGAGTAT, CGAGGAAGGAC, CTAGCTAGGAT, CGAGCAATGAC, CGAGGAAGGAA, CGCGCAAGGCT, CGAGCTAGGTT, TGAGCAACGAT, CCTGCAAGGAT, CGAGGAAGGAG, CGAGCTACGAT, CTAGCAAGGTT, CCAGCAAGGCT, CAAGCACGGAT, CGATCAAGCAT, CGGGCAAGCAT, CGATCAATGAT, CGAGCCAGGAT, TGAGCCAGGAT, CGACCATGGAT, TGAGGAAGGAT, CGAGCAAGGGG, CGAACACGGAT, CGAGGAAGGAT, CGAGCAAGGGC, CGAGCAAGGGA, CGAGCATGCAT, CAAGCATGGAT, TTAGCAAGGAT, CGAGCGAGCAT, AGAGCAAGGTT, TGAGCAAGTAT, CGACCAACGAT, CCAGCCAGGAT, TGATCAAGGAT, CGCGCAAGCAT, TGAGCAAGCAT, CGCTCAAGGAT, CTAGCCAGGAT, TGAGCAGGGAT, CCACCAAGGAT, GGATCAAGGAT, TGAGCAATGAT, CGAGCATGTAT, TCAGCAAGGAT, CGGGCAAGGCT, CGAGATAGGAT, CGTGCAAGGGT, CGCGCAATGAT, CTAGGAAGGAT, CGGGCCAGGAT, CGAGCATGGGT, CGAGCAAGGCT, CGAACAAGGGT, CGCGCAAGTAT, CGAGCTCGGAT, AGAGCAACGAT, CGAGTAGGGAT, AGGGCAAGGAT, CGAGTAAGGGT, CGTGCAAGTAT, CGAGAATGGAT, CGAGCACGGAA, AGAGTAAGGAT, CGACCAAGGTT, CGAGCACGGAC, CGAACAAGTAT, CAAGAAAGGAT, CGTGCAATGAT, CTAGCGAGGAT, CGCGCAAGGGT, CGCGGAAGGAT, CTAGCAAAGAT, CGATCAAGAAT, CGAGCACGGAT, GGAGCAAGAAT, CGAGCACGGAG, AGAACAAGGAT, GGAGGAAGGAT, CAAGCCAGGAT, CCAGCAAAGAT, CGAGCAAGGCG, CGACCACGGAT, CGAGCAAGGCC, CGAGCCACGAT, CGAGCAGAGAT, CAAGGAAGGAT, CGAGCAAGGCA, CGTGCAAGCAT, CGGACAAGGAT, CGTCCAAGGAT, CGAGTAAGCAT, CGAACAAGGAG, CGAGCAAGGAT, CGAACAAGGAC, CGAGCAACAAT, CAAGCAAGGAT, CGAGCGAGAAT, CAAGCAAGGAG, CGGGCATGGAT, CAAGCAAGGAC, CGAGCAAAGTT, CGAACAAGGAT, CGCGCAAGAAT, CGTTCAAGGAT, CCAGCAAGAAT, GGAGCAGGGAT, CGAGCACGGCT, CTACCAAGGAT, TGAGCAAGAAT, CAAGCAAGGAA, CGAGCTTGGAT, GGAGCAAGGGT, TGAGCGAGGAT, CGAGCGGGGAT, AGAGCACGGAT, CGAGTAATGAT, CGAGCAAGGAG, CGAGTAAGTAT, CGAGCAAGGAC, CGAGCAGCGAT, CGAGCAAGGAA, CGCGCAGGGAT, CGAACAAGGAA, GGAGCAAGTAT, GGAGCAATGAT, CGAGCGAAGAT, CAAGCAAGGCT, CGAGCATGGCT, CGAGAAAGGAT, CGGGCTAGGAT, CTAGCAAGAAT, CGAGGACGGAT, CGTGCAGGGAT, CGGGCAAGGAA, CGAACAAGGCT, CGAGCCCGGAT, CAAGCTAGGAT, CGAGCAAGATT, CGATCAAAGAT, CGATCGAGGAT, CGGGCAAGGAC, CCAGCAGGGAT, CGGGCAAGGAG, CGAACTAGGAT, GGAGCAAGCAT, CGACTAAGGAT, CGAGAAAGGAA, CTAGCAGGGAT, CGGGCAAGGAT, CGAGAAAGGAC, CGTGCAAGAAT, CGAGCAGGGTT, CGAGAAAGGAG]",
                    alg.Neighbors(str1, Integer.parseInt(str2)).toString());

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void frequentWordsWithMismatches() {
        assertEquals("[ATGC, ATGT, GATG]", alg.FrequentWordsWithMismatches("ACGTTGCATGTCGCATGATGCATGAGAGCT", 4, 1).toString());

        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/dataset_9_7.txt"));
            String str1 = br.readLine();
            String str2 = br.readLine();

            assertEquals("[GGCCGGC]",
                    alg.FrequentWordsWithMismatches(str1, Integer.parseInt(str2.split(" ")[0]), Integer.parseInt(str2.split(" ")[1])).toString());

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void frequentWordsWithMismatchesAndReverseComplement() {
        List<String> ls = alg.FrequentWordsWithMismatchesAndReverseComplement("ACGTTGCATGTCGCATGATGCATGAGAGCT", 4, 1);

        assertEquals(2, ls.size());
        assertTrue(ls.contains("ATGT"));
        assertTrue(ls.contains("ACAT"));


        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/dataset_9_8.txt"));
            String str1 = br.readLine();
            String str2 = br.readLine();

            ls = alg.FrequentWordsWithMismatchesAndReverseComplement(str1, Integer.parseInt(str2.split(" ")[0]), Integer.parseInt(str2.split(" ")[1]));

            assertEquals(2, ls.size());
            assertTrue(ls.contains("ATTAA"));
            assertTrue(ls.contains("TTAAT"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    @Test
    public void betterClumpFindingWithMismatchesAndRC() {

        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/Salmonella_enterica.txt"));
            StringBuilder strBuilder = new StringBuilder();
            String str = "";

            br.readLine(); //ignore first line.
            while ((str = br.readLine()) != null) {
                strBuilder.append(str);
            }

            assertEquals("{ATCAATTGA=8, CCGGATCCG=10, TCAATTGAT=8, ACGGCGCCG=8, GATCTGGTT=8, TCGGCGCCG=8, AACACGATC=8, GATCGTGTT=8, CGGCGCCGT=8, CCAGGATCC=10, CCGGCGCCG=8, GGATCCTGG=10, GATCGGCTT=8, CGGCGCCGC=8, CGGCGCCGA=8, AACCAGATC=8, CGGCGCCGG=8, CGGATCCGG=10, GCGGCGCCG=8, AAGCCGATC=8, CCCGGATCC=10, GGATCCGGG=10}",
                    alg.ClumpFindingWithSkewMismatchesAndRC(strBuilder.toString(), 9, 500, 1).toString());

        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    @Test
    public void probabilityOfOccurrence() {
        double prob = alg.probabilityOfOccurrrence(500, 1000, 9, 0.25);
        System.out.println(prob);
        assertTrue((prob - 1.89208984375) < 0.0001);
    }

    @Test
    public void motifEnumeration() {
        List<String> dnas = new ArrayList<>();
        dnas.add("ATTTGGC");
        dnas.add("TGCCTTA");
        dnas.add("CGGTATC");
        dnas.add("GAAAATT");

        Set<String> set = alg.MotifEnumeration(dnas, 3, 1);

        System.out.println(set.toString());
        assertEquals(4, set.size());
        assertTrue(set.contains("ATA"));
        assertTrue(set.contains("ATT"));
        assertTrue(set.contains("GTT"));
        assertTrue(set.contains("TTT"));

        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/dataset_156_8.txt"));
            String str = "";

            String s = br.readLine();
            List<String> ls = new ArrayList<>();
            while ((str = br.readLine()) != null) {
                ls.add(str);
            }

            String[] params = s.split(" ");

            assertEquals("[CCTGA, GGAGT, CGGAT, GGAGG, CTCTA, CCAAG, CAAGG, TGAAA, TGAAC, CAGTG, CGGAA, GGGTG, GCATC, GCATA, CAGTC, AATCT, CAGTA, CGGAG, GTAAC, CCAAT, CCTGG, CAAGT, GCATG, CCTGC, TGTGG, TGAAT, ACGCT, CTCTT, TTGGC, TTGGA, CAGTT, GTAAT, GTTGG, GTTGC, GGGTT, CCTGT, TGTGT, ACGCA, CCCGC, CCACA, TTTAC, CCCGA, ACGCC, ACGCG, AACAG, GAGGA, CGATG, GCGAA, GCGAC, TCTTG, GAGGG, TCTTC, CGATT, ACGGA, GAGGC, ATGTT, TGCCC, TGCCG, ATGTC, GCGAG, ATGTA, AGTTT, CGATA, GATAC, CCCCT, GTCGC, GAGGT, GTCGA, TGCCT, CTTTG, CTTTC, AACCT, CTTTA, AGTTC, GTACT, CAAGC, ATAGA, CAAGA, ATAGG, AACCG, GCGCA, GCGCC, TATTG, CCCAG, GCGCG, TCGTT, GACAG, CAACG, GACAC, GACAA, CACGC, TGCAC, GCGCT, AGGTT, TCGTG, TGCAG, CCTCG, CCCAT, GATCG, ATTGG, GACAT, CCTCC, CACGT, GATCC, CCTCA, TGTCC, TCAGT, TTGCC, AGGTG, TGCAT, TTGCA, TGTCG, AGGTC, CCTCT, GATCT, ACATT, TCAGG, TGTCT, TCAGA, AGAGT, ACATC, TTGCT, GTAGA, CGCTG, CAAAG, TACTT, GACCG, CCGGC, GACCC, CCGGA, TGGGC, CCTAG, TGGGG, CATGG, CCTAC, TACTC, CCTAA, GTAGG, CCGGT, CATGC, GACCT, CATGA, CGCTC, GTAGC, TGTAA, TTGAA, TGTAC, ATACT, AAGGT, TGTAG, GTGTA, GGTTC, ACGAT, TTGAG, GTAGT, CACGA, AAGGC, ATCGA, ACGAC, TGTAT, GTGTT, ATACC, AAGGG, ACGAA, ATCGC, ACGAG, GAAAA, GCGGG, CTAGG, CACCG, GAAAG, CGTTA, GCGGA, TCATT, GAAAC, CGTTC, GCGGC, GATGC, ACCTT, GCTAG, ATCAT, CACCT, GGCTA, TTCGC, TTACA, TCATG, CTAGC, GAAAT, CTAGA, GATGG, TCATC, GGCTG, CTGTT, CGTTT, TTACG, ACCTC, ACCTG, AAGAT, ATCAC, GGCTT, CGTTG, CTGTC, CTGTA, AGACT, ACCTA, AGCGT, GAACC, GCCAA, GACGC, AGAGC, GACGA, CCGCG, CACAG, CCGCC, TGAGA, TGAGC, CCGCA, GCCAG, GACGG, TGAGG, GCCAC, AGAGG, GCTCC, GACGT, TCGAT, GCTCG, CATCG, CACAT, CCGCT, CATCC, ATCCT, CATCA, TGAGT, GCCAT, GCTCA, GAACT, TGGTA, TCGAG, TGGTC, TAGGG, TTAAC, TGGTG, TCGAA, TAGGC, TTTGA, TAGGA, AAGCT, AAGCC, AAGCA, AAGCG, GCCCC, GCCCA, CCGAG, CTACG, CTCGG, CCGAC, GGATA, CCGAA, CTCGT, CAGGC, TCCTT, GCCCG, CAGGA, AGAAA, CATAG, CCGAT, TCCTG, CAGGT, GGATC, CTACA, CTCGC, CTCGA, TCCTC, TCCTA, TAGAG, GCCCT, TAGAC, TAGAA, TTCCA, GGATT, AGCCG, CTACT, TCTTT, AGCCT, GCAAC, GGGAC, CTAAG, CGGTA, AGCGA, GAAGC, GGGAG, CTAAC, GAAGA, CTAAA, CGGTG, CTTGC, AGCGG, GTTTT, AGACG, CTTGA, AGACA, TGACA, GCAAG, AGCGC, TGCGC, AGACC, TGACC, GCTGG, TGCGG, TGACG, ACTTC, GAAGT, GGGAT, TAGCT, ACTTG, GCTGA, CGAGT, CCATG, GCTGC, TGCGT, TGACT, CCATC, TTCAC, TAGCC, GTCTG, TAGCA, GAGTG, GAGTT, GTCTC, ATGGC, GTCTA, ACTTA, AGTGT, TTCAG, TTCAT, CGGTT, TTTCC, AGAAG, GTCTT, AGAAT, AGTGA, GCCGG, CTCCG, GCACC, GGGCG, CAGCG, GCCGC, GCCGA, TCTAT, CAGCC, CTCCA, CAGCA, GCACG, GCACT, GGGCT, AATTC, GCCGT, AGTAT, TCTAG, ACGTT, TCTAC, TATGG, TCTAA, TATGC, TATGA, AGTAG, ATGAG, ACGTA, CGAGA, CGAGC, TCGGC, CGAGG, ATGAC, CTCCT, AGTAA, AGGGT, ACAGT, CAGAG, CTCAC, CTCAA, CAGAC, CAGAA, AGCCC, TCTCT, AGCCA, CTCAG, CGACG, AACTT, CAGAT, TCTCG, CCCTG, TGCTA, CGCGT, ATGCT, CGACT, CCCTA, AACTC, ATGCG, CTTCT, AGCAT, TCCAG, TAACG, GTATG, TACGG, ATGCA, TCCAC, AGTCT, TAACC, TCCAA, TAACA, CCCTT, ATGCC, CTTCG, TGCTT, CTTCC, CTTCA, GCAGA, AGTCA, CGAAT, CTGGG, CTGGC, GCAGC, CTGGA, GGGGC, CGTGT, GCGTA, GGTAG, CGAAG, GCGTC, GTGAC, GCAGT, GTGAA, TCGCT, GCGTG, TATCC, TATCA, CGTGA, GGTAC, GGGGT, CGTGC, CAATA, GATTA, GTGAT, TACAG, ACACT, TCGCG, GCGTT, TACAC, AGGCT, TTAGG, TCGCC, CCTTG, CGCGA, TCGCA, CGACA, CGCGC, CGACC, CCTTC, GATTC, CGCGG, GTGAG, AGGCG, TTGTA, CTTAC, ACCGG, CTGGT, AGGCC, CTTAA, TGTTG, CCTTT, TTGTG, ACCGT, CTTAG, CGCCT, ACAGC, GGCAA, ACAGA, GGCAC, ACAGG, AGGGA, GACTA, GGTCG, CGCCG, GTGCC, GTGCA, GGTCA, TACCT, ATATG, GACTG, GGTCC, GGCAT, GACTC, TACCG, TACCA, CGAAA, GACTT, CGAAC, GGTCT, CTGCC, CTGCA, CGCAT, GGCCA, AAAGA, CTGCG, GGCCG, AAAGC, CGCAC, CGCAG, CACTG, CACTC, TCACT, CACTA, GGCCT, CGTCA, ACCCT, TCACG, CACTT, CGCCA, TCACC, AGATT, CGTCT, CTGCT, TTATG, AGATG, AGATC, CTGAA, CCAGT, CGGGT, GGTGA, TTCTT, CGTAG, GGAAA, ACCGA, GGAAC, AGGCA, CTGAG, ATCTT, ACACC, CCAGG, CTGAC, GAATC, GAATA, TGGCA, CCGTG, AAGTT, TGGCC, ATCTG, TGGCG, GTGGC, GTGGA, CCGTA, GGAAT, GAATG, GGTGG, GAATT, ACAAT, ACTGG, AGGAT, GCTTG, TGGCT, AAGTA, CATTG, GTGGT, CCGTT, CGCAA, GCTTC, CGTAT, AGGAG, GGCGA, GTTAT, GGACA, ACAAG, GGCGC, ACTGC, CTGAT, ACTGA, GGACC, CTATC, GAGAC, GAGAA, CTATA, GGCGG, GGACG, AACGA, GCCTC, GCCTA, GTCAG, TGGAA, ACTAT, TGGAC, GGCGT, GTCAA, GGACT, TGGAG, GCCTG, GCCTT, ACGGT, GTTCG, GTCAT, ACTAC, TCCCG, GAGAT, AGCTT, GTTCA, ACTAG, CGGGA, CCAGC, ACGGC, TTCTC, CCAGA, GTTCT, CGGCT, CCACG, GAGCC, GAGCA, ACCCA, ACTCT, CGGCA, CGGCC, TAGTG, CGGCG, GAGCG, TAGTC, GAGCT, TCTGG, GTCCA, CCACT, TGATC, TAAGT, AAACT, TCTGA, ACTCC, AACGT, ACTCA, ACTCG, TCAAG, GTCCT, TCAAC, TAAGA, GGAGA, ACCAA, GGAGC, ACCAG, AAACG]",
                    alg.MotifEnumeration(ls, Integer.parseInt(params[0]), Integer.parseInt(params[1])).toString());

        } catch (IOException e) {
            e.printStackTrace();
        }


        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/subtle_motif_dataset.txt"));
            String str = "";

            List<String> ls = new ArrayList<>();
            while ((str = br.readLine()) != null) {
                ls.add(str.replaceAll("\\*", ""));
            }

            //takes 19m 58s
//            assertEquals("[AAAAAAAAGGGGGGG]", alg.MotifEnumeration(ls, 15, 4).toString());

        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    @Test
    public void score() {
        List<String> motifs = new ArrayList<>();
        motifs.add("TCGGGGGTTTTT");
        motifs.add("CCGGTGACTTAC");
        motifs.add("ACGGGGATTTTC");
        motifs.add("TTGGGGACTTTT");
        motifs.add("AAGGGGACTTCC");
        motifs.add("TTGGGGACTTCC");
        motifs.add("TCGGGGATTCAT");
        motifs.add("TCGGGGATTCCT");
        motifs.add("TAGGGGAACTAC");
        motifs.add("TCGGGTATAACC");

        assertEquals(30, alg.Score(motifs));
    }

    @Test
    public void count() {
        List<String> motifs = new ArrayList<>();
        motifs.add("TCGGGGGTTTTT");
        motifs.add("CCGGTGACTTAC");
        motifs.add("ACGGGGATTTTC");
        motifs.add("TTGGGGACTTTT");
        motifs.add("AAGGGGACTTCC");
        motifs.add("TTGGGGACTTCC");
        motifs.add("TCGGGGATTCAT");
        motifs.add("TCGGGGATTCCT");
        motifs.add("TAGGGGAACTAC");
        motifs.add("TCGGGTATAACC");

        assertEquals("[{A=2, C=1, T=7}, {A=2, C=6, T=2}, {G=10}, {G=10}, {G=9, T=1}, {G=9, T=1}, {A=9, G=1}, {A=1, C=4, T=5}, {A=1, C=1, T=8}, {A=1, C=2, T=7}, {A=3, C=4, T=3}, {C=6, T=4}]",
                Arrays.toString(alg.count(motifs)));
    }

    @Test
    public void profile() {
        List<String> motifs = new ArrayList<>();
        motifs.add("TCGGGGGTTTTT");
        motifs.add("CCGGTGACTTAC");
        motifs.add("ACGGGGATTTTC");
        motifs.add("TTGGGGACTTTT");
        motifs.add("AAGGGGACTTCC");
        motifs.add("TTGGGGACTTCC");
        motifs.add("TCGGGGATTCAT");
        motifs.add("TCGGGGATTCCT");
        motifs.add("TAGGGGAACTAC");
        motifs.add("TCGGGTATAACC");

        assertEquals("[{A=0.2, C=0.1, T=0.7}, {A=0.2, C=0.6, T=0.2}, {G=1.0}, {G=1.0}, {G=0.9, T=0.1}, {G=0.9, T=0.1}, {A=0.9, G=0.1}, {A=0.1, C=0.4, T=0.5}, {A=0.1, C=0.1, T=0.8}, {A=0.1, C=0.2, T=0.7}, {A=0.3, C=0.4, T=0.3}, {C=0.6, T=0.4}]",
                Arrays.toString(alg.profile(motifs)));
    }

    @Test
    public void profileMap() {
        List<String> motifs = new ArrayList<>();
        motifs.add("TCGGGGGTTTTT");
        motifs.add("CCGGTGACTTAC");
        motifs.add("ACGGGGATTTTC");
        motifs.add("TTGGGGACTTTT");
        motifs.add("AAGGGGACTTCC");
        motifs.add("TTGGGGACTTCC");
        motifs.add("TCGGGGATTCAT");
        motifs.add("TCGGGGATTCCT");
        motifs.add("TAGGGGAACTAC");
        motifs.add("TCGGGTATAACC");

        assertEquals("{A=[0.2, 0.2, null, null, null, null, 0.9, 0.1, 0.1, 0.1, 0.3, null, null, null, null, null, null, null, null], C=[0.1, 0.6, null, null, null, null, null, 0.4, 0.1, 0.2, 0.4, 0.6, null, null, null, null, null, null, null], G=[null, null, 1.0, 1.0, 0.9, 0.9, 0.1, null, null, null, null, null, null, null, null, null, null], T=[0.7, 0.2, null, null, 0.1, 0.1, null, 0.5, 0.8, 0.7, 0.3, 0.4, null, null, null, null, null, null, null, null, null]}",
                (alg.profileMap(motifs)).toString());
    }

    @Test
    public void consensus() {
        List<String> motifs = new ArrayList<>();
        motifs.add("TCGGGGGTTTTT");
        motifs.add("CCGGTGACTTAC");
        motifs.add("ACGGGGATTTTC");
        motifs.add("TTGGGGACTTTT");
        motifs.add("AAGGGGACTTCC");
        motifs.add("TTGGGGACTTCC");
        motifs.add("TCGGGGATTCAT");
        motifs.add("TCGGGGATTCCT");
        motifs.add("TAGGGGAACTAC");
        motifs.add("TCGGGTATAACC");

        assertEquals("TCGGGGATTTCC",
                alg.Consensus(motifs));
    }

    @Test
    public void entropy() {
        List<String> motifs = new ArrayList<>();
        motifs.add("TCGGGGGTTTTT");
        motifs.add("CCGGTGACTTAC");
        motifs.add("ACGGGGATTTTC");
        motifs.add("TTGGGGACTTTT");
        motifs.add("AAGGGGACTTCC");
        motifs.add("TTGGGGACTTCC");
        motifs.add("TCGGGGATTCAT");
        motifs.add("TCGGGGATTCCT");
        motifs.add("TAGGGGAACTAC");
        motifs.add("TCGGGTATAACC");

        assertEquals(9.916290005356972, alg.entropy(motifs), 0.00001);
    }


    @Test
    public void medianString() {
        List<String> motifs = new ArrayList<>();

        motifs.add("AAATTGACGCAT");
        motifs.add("GACGACCACGTT");
        motifs.add("CGTCAGCGCCTG");
        motifs.add("GCTGAGCACCGG");
        motifs.add("AGTTCGGGACAG");

        assertEquals("GAC", alg.MedianString(motifs, 3));

        motifs = new ArrayList<>();

        motifs.add("CTCGATGAGTAGGAAAGTAGTTTCACTGGGCGAACCACCCCGGCGCTAATCCTAGTGCCC");
        motifs.add("GCAATCCTACCCGAGGCCACATATCAGTAGGAACTAGAACCACCACGGGTGGCTAGTTTC");
        motifs.add("GGTGTTGAACCACGGGGTTAGTTTCATCTATTGTAGGAATCGGCTTCAAATCCTACACAG");




        assertEquals(7, alg.DistanceBetweenPatternAndStrings(motifs, "ATAACGG"));
        assertEquals(9, alg.DistanceBetweenPatternAndStrings(motifs, "CGTGTAA"));
        assertEquals(0, alg.DistanceBetweenPatternAndStrings(motifs, "TAGTTTC"));
        assertEquals(8, alg.DistanceBetweenPatternAndStrings(motifs, "TCTGAAG"));
        assertEquals(4, alg.DistanceBetweenPatternAndStrings(motifs, "GATGAGT"));
        assertEquals(0, alg.DistanceBetweenPatternAndStrings(motifs, "GTAGGAA"));
        assertEquals(0, alg.DistanceBetweenPatternAndStrings(motifs, "AATCCTA"));
        assertEquals(9, alg.DistanceBetweenPatternAndStrings(motifs, "GTCAGCG"));
        assertEquals(9, alg.DistanceBetweenPatternAndStrings(motifs, "AACGCTG"));
        assertEquals(6, alg.DistanceBetweenPatternAndStrings(motifs, "GGTTACT"));
        assertEquals(0, alg.DistanceBetweenPatternAndStrings(motifs, "GAACCAC"));

        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/dataset_158_9.txt"));
            String str = "";

            int k = Integer.parseInt(br.readLine());

            List<String> ls = new ArrayList<>();
            while ((str = br.readLine()) != null) {
                ls.add(str);
            }

            assertEquals("CGTTAT", alg.MedianString(ls, k));

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void probabilityOfProfile() {
        double[][] d = {
            {.2, .2, 0, 0,  0, 0, .9, .1, .1, .1, .3,  0},
            {.1, .6, 0, 0,  0, 0,  0, .4, .1, .2, .4, .6},
            { 0,  0, 1, 1, .9,.9, .1,  0,  0,  0,  0,  0},
            {.7, .2, 0, 0, .1,.1,  0, .5, .8, .7, .3, .4},
        } ;


        assertEquals(0.0, alg.ProbabilityOfPatternInAProfile(d, "TCGTGGATTTCC"));
    }
    @Test
    public void profileMostProbablekmer() {

        Map<Character, List<Double>> d = new HashMap<>();

        d.put('A', Arrays.asList(0.2, 0.2, 0.3, 0.2, 0.3));
        d.put('C', Arrays.asList(0.4, 0.3, 0.1, 0.5, 0.1));
        d.put('G', Arrays.asList(0.3, 0.3, 0.5, 0.2, 0.4));
        d.put('T', Arrays.asList(0.1, 0.2, 0.1, 0.1, 0.2));


        assertEquals("CCGAG", alg.ProfileMostProbablekmer("ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT", 5, d));

        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/dataset_159_3.txt"));
            String str = "";

            String text = br.readLine();
            int k = Integer.parseInt(br.readLine());

            Map<Character, List<Double>> map = new HashMap<>();

            int j =0;

            while ((str = br.readLine()) != null) {
                char c = alg.numberToPattern(j++, 1).charAt(0);

                for(String s : str.split(" ")){
                    map.computeIfAbsent(c, k1 -> new ArrayList<>());
                    map.get(c).add(Double.parseDouble(s));
                }
            }

            assertEquals("GCTCTCGGTTTAT", alg.ProfileMostProbablekmer(text, k, map));

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void greedyMotifSearch() {
        List<String> dna = new ArrayList<>();
        dna.add("GGCGTTCAGGCA");
        dna.add("AAGAATCAGTCA");
        dna.add("CAAGGAGTTCGC");
        dna.add("CACGTCAATCAC");
        dna.add("CAATAATATTCG");

        assertEquals("[CAG, CAG, CAA, CAA, CAA]", alg.GreedyMotifSearch(dna, 3, 5).toString());

        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/dataset_159_5.txt"));
            String str = br.readLine();


            int k = Integer.parseInt(str.split(" ")[0]);
            int t = Integer.parseInt(str.split(" ")[1]);

            List<String> ls = new ArrayList<>();

            while ((str = br.readLine()) != null) {
                ls.add(str);
            }

            assertEquals("[GCGTCTCCGATT, GGTCACAACTGC, AATTTACCGAGG, ATAACTGGCGCG, AAACCTACGAGG, GAACCACGCTCG, AAAATACCGATG, AAATCACAGTGT, AAGTTACCGACG, AAGTCACCGACG, AAGAAACCGATG, ATGTAAGCGACC, AGAATTCGCAGC, AAATTACCGATG, AATTAACCGACG, AAAATACCGATG, AAGATACCGATG, AAAAAACCGACG, ATAATTGAGGGC, AGTCTACCGATC, GTGACAACGGTG, AACTGTCCCCGC, AACCGACCGAGG, AAATGACCGATG, AAACGACCGACG]",
                    alg.GreedyMotifSearch(ls, k, t).toString());

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void distanceBetweenPatternAndStrings() {
        List<String> patterns = new ArrayList<>();
        patterns.add("TTACCTTAAC");
        patterns.add("GATATCTGTC");
        patterns.add("ACGGCGTTCG");
        patterns.add("CGTCAGAGGT");

        assertEquals(5, alg.DistanceBetweenPatternAndStrings(patterns, "AAA"));

        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/dataset_5164_1.txt"));
            String str = br.readLine();


            String k = str;

            List<String> ls = new ArrayList<>();

            while ((str = br.readLine()) != null) {
                System.out.println(str);
                ls.addAll(Arrays.asList(str.split(" ")));
            }

            assertEquals(42,
                    alg.DistanceBetweenPatternAndStrings(ls, k ));

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void greedyMotifSearchWithPseudoCount() {
        List<String> dna = new ArrayList<>();
        dna.add("GGCGTTCAGGCA");
        dna.add("AAGAATCAGTCA");
        dna.add("CAAGGAGTTCGC");
        dna.add("CACGTCAATCAC");
        dna.add("CAATAATATTCG");

        assertEquals("[TTC, ATC, TTC, ATC, TTC]", alg.GreedyMotifSearchWithPseudoCount(dna, 3, 5).toString());

        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/dataset_160_9.txt"));
            String str = br.readLine();


            int k = Integer.parseInt(str.split(" ")[0]);
            int t = Integer.parseInt(str.split(" ")[1]);

            List<String> ls = new ArrayList<>();

            while ((str = br.readLine()) != null) {
                ls.add(str);
            }

            assertEquals("[GAGGCGTGTTAT, GAGCCGTGGTAT, GAGACATGTTAT, GAGTCTTTTTAT, GAGACATCCTAT, GAGCCGTTTTAT, GAGCCGTGATAT, GAGGCCTCTTAT, GAGACCTAGTAT, GAGGCATTCTAT, TAGCCGTTTTAT, GAGACCTAGTAT, GAGACGTCGTAT, GAGTCATTATAT, GAGGCCTCATAT, GAGGCTTTATAT, GAGCCTTATTAT, GAGCCCTGTTAT, GAGCCTTTCTAT, GAGGCATCCTAT, GAGCCATATTAT, GAGACATATTAT, GAGACCTACTAT, GAGTCCTGGTAT, GAGGCATCGTAT]",
                    alg.GreedyMotifSearchWithPseudoCount(ls, k, t).toString());

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void entropyOfDistribution() {
        double[] d1 = {0.5, 0, 0, 0.5};
        double[] d2 = {0.25,0.25,0.25,0.25};
        double[] d3 = {0, 0, 0, 1};
        double[] d4 = {0.25, 0, 0.5, 0.25};

        assertEquals(1.0, alg.entropy(d1));
        assertEquals(2.0, alg.entropy(d2));
        assertEquals(-0.0, alg.entropy(d3));
        assertEquals(1.5, alg.entropy(d4));
    }

    @Test
    public void randomizedMotifSearch(){
        List<String> dna = new ArrayList<>();
        dna.add("CGCCCCTCTCGGGGGTGTTCAGTAAACGGCCA");
        dna.add("GGGCGAGGTATGTGTAAGTGCCAAGGTGCCAG");
        dna.add("TAGTACCGAGACCGAAAGAAGTATACAGGCGT");
        dna.add("TAGATCAAGTTTCAGGTGCACGTCGGTGAACC");
        dna.add("AATCCACCAGCTCCACGTGCAATGTTGGCCTA");

        List<List<String>> motifs = new ArrayList<>();
        int minScore = Integer.MAX_VALUE;
        int k = 0;

        for (int i = 0; i < 1000; i++) {
            List<String> motifs1 = alg.RandomizedMotifSearch(dna, 8, 5);
            motifs.add(motifs1);

            int score = alg.Score(motifs1);
            if(score < minScore) {
                minScore = score;
                k = i;
            }

//            System.out.println(i + " th score is " + minScore);
        }

        assertEquals("[TCTCGGGG, CCAAGGTG, TACAGGCG, TTCAGGTG, TCCACGTG]", motifs.get(k).toString());

        dna = new ArrayList<>();
        dna.add("ATGAGGTC");
        dna.add("GCCCTAGA");
        dna.add("AAATAGAT");
        dna.add("TTGTGCTA");

        List<String> bestMotifs = new ArrayList<>();

        bestMotifs.add("GTC");
        bestMotifs.add("CCC");
        bestMotifs.add("ATA");
        bestMotifs.add("GCT");

        assertEquals("[GTC, GCC, ATA, GCT]", alg.RandomizedMotifSearch(dna, bestMotifs, 3, 5).toString());

        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/dataset_161_5.txt"));
            String str = br.readLine();


            k = Integer.parseInt(str.split(" ")[0]);
            int t = Integer.parseInt(str.split(" ")[1]);

            List<String> ls = new ArrayList<>();

            while ((str = br.readLine()) != null) {
                ls.add(str);
            }


            motifs = new ArrayList<>();
            minScore = Integer.MAX_VALUE;
            int p = 0;

            for (int i = 0; i < 1000; i++) {
                List<String> motifs1 = alg.RandomizedMotifSearch(ls, k, t);
                motifs.add(motifs1);

                int score = alg.Score(motifs1);
                if(score < minScore) {
                    minScore = score;
                    p = i;
                }
            }

            assertEquals("[GCAGGAGGAGCCTAC, GCATCAGGAGCTTCT, GCAAGTTCTGCTTCT, GCAAGTGGTCGTTCT, GCAAGCAAAGCTTCT, GCAAGTGGATACTCT, GCAAGTGGAGTACCT, GCAAGTGGAGCTCTG, CCAAGTGGAGCTTAG, GCAGCAGGAGCTTCT, AACAGTGGAGCTTCT, CGAAGTGGAGCTTCA, GCGGCTGGAGCTTCT, GCAAGTACGGCTTCT, GCAAGTGATTCTTCT, GAGCGTGGAGCTTCT, GCAATCAGAGCTTCT, GCAAGGACAGCTTCT, GCAAGTGGAGCCCAT, GCAATGAGAGCTTCT]", motifs.get(p).toString());

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void computeProbability(){
        assertEquals(0.01693439692910992, alg.computeProbability1());
        assertEquals(0.0001298567056758973, alg.computeProbability2());
    }

    @Test
    public void gibbsSampler(){
        List<String> dna = new ArrayList<>();
        dna.add("CGCCCCTCTCGGGGGTGTTCAGTAAACGGCCA");
        dna.add("GGGCGAGGTATGTGTAAGTGCCAAGGTGCCAG");
        dna.add("TAGTACCGAGACCGAAAGAAGTATACAGGCGT");
        dna.add("TAGATCAAGTTTCAGGTGCACGTCGGTGAACC");
        dna.add("AATCCACCAGCTCCACGTGCAATGTTGGCCTA");

        List<List<String>> motifs = new ArrayList<>();
        int minScore = Integer.MAX_VALUE;
        int k = 0;

        for (int i = 0; i < 100; i++) {
            List<String> motifs1 = alg.GibbsSampler(dna, 8,5, 100);
            motifs.add(motifs1);

            int score = alg.Score(motifs1);
            if(score < minScore) {
                minScore = score;
                k = i;
            }

//            System.out.println(i + " th score is " + minScore);
        }

        assertEquals("[TCTCGGGG, CCAAGGTG, TACAGGCG, TTCAGGTG, TCCACGTG]", motifs.get(k).toString());


        try {
            BufferedReader br = new BufferedReader(new FileReader("/home/mahalaxmi/projects/ctd/DI_ETL/LSH/src/main/datasets/dataset_163_4.txt"));
            String str = br.readLine();


            k = Integer.parseInt(str.split(" ")[0]);
            int t = Integer.parseInt(str.split(" ")[1]);
            int N = Integer.parseInt(str.split(" ")[2]);

            List<String> ls = new ArrayList<>();

            while ((str = br.readLine()) != null) {
                ls.add(str);
            }


            motifs = new ArrayList<>();
            minScore = Integer.MAX_VALUE;
            int p = 0;

            for (int i = 0; i < 20; i++) {
                List<String> motifs1 = alg.GibbsSampler(ls, k, t, N);
                motifs.add(motifs1);

                int score = alg.Score(motifs1);
                if(score < minScore) {
                    minScore = score;
                    p = i;
                }
            }

            assertEquals("[TAGACAGTCAAGGCA, TAATATGTTTAGGCG, TAACCAGTTTAACGG, AGACCAGTTTAGGCC, TAACCAGTTTAGTAT, TACAAAGTTTAGGCG, TAACCAGTACTGGCG, TAACCATCGTAGGCG, TAACCTTATTAGGCG, TTGTCAGTTTAGGCG, AAACCAGTTTAGGTC, TAACCAGTTAGCGCG, TAACGCATTTAGGCG, TAACATATTTAGGCG, TAAGTCGTTTAGGCG, CGTCCAGTTTAGGCG, TAACCAGTTTCAACG, TAACCTAATTAGGCG, TAACCACCCTAGGCG, TAACCAGACGAGGCG]",
                    motifs.get(p).toString());

        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}


